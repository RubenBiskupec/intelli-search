Indonesian Journal of Electrical Engineering and Computer Science
Vol. 20, No. 3, December 2020, pp. 1460~1470
ISSN: 2502-4752, DOI: 10.1159 1/ijeecs.v20.13 .pp1460- 1470 O 1460

A lightweight secure CoAP for IoT-cloud paradigm using

elliptic-cur ve cryptography

Amrani Ayoub, Rafalia Najat, Abouchabaka Jaafar
LARIT, IT department, Faculty of Sciences Kenitra, IbnTofail University, Morocco

Article Info
Article history:

Received Mar 1, 2020
Revised May 16, 2020
Accepted Jun 1, 2020

Keywords:

Authentication

Avispa

CoAP

Elliptic curve cryptography
Internet of things

ABSTRACT

Cloud computing and the internet of things (oT), two different technologies,
are already part of our lives. Their impressive adoption increasing more and
more, which makes them the future of the future internet. The tsunami of
interconnectivity between objects and data collection is increasingly based on
Cloud Computing, where data analysis and intelligence really reside. A new
paradigm where the Cloud and the IoT are merged will create a new air in the
world of technology, which can offer many services and applications useful
to humanity. However, despite the great benefits that can bring this
technology in term of new services, elasticity and flexibility, the security
aspect still remains a serious constraint which hampers the expansion of this
technology. This paper proposes a lightweight Mutual authentication
protocol based on constrained application protocol (CoAP); that is suitable
for IoT device than HTTP and using elliptic curve cryptography to secure
data transmission between the Cloud and devices. We used AVISPA tool to

verify our proposed scheme.

Copyright © 2020 Institute of Advanced Engineering and Science.
All rights reserved.

Corresponding Author:

Ayoub Amrani,

Department of Computer Engineering,
Ibn Tofail University,

242 University Road, kenitra, Morocco.
Email: amrani.ayoub@uit.ac.ma

1. INTRODUCTION

The Internet of things has become a common term in our society. By 2025, a hundred
thousand objects will be connected to the Internet that communicates and share various massive data via
limited resource to provide appropriate services to users, such as healthcare, smart home, transport, and smart
gird. However, this large amount of data generated by these objects cannot be running by a single
server environment.

Cloud computing is a distributed computing and large pool of resources for a wide-ranging of
data [1]. It provides three essential services such as on-demand self-services especially data storage and
computing power, rapid elasticity, ubiquitous network access, etc. This convergence between the Cloud and
IoT will be welcome in order to create a homogeneous environment between the intelligibility of the objects
and the robustness of the cloud, and it will bring many services that will be very useful to humanity.
However, these services are facing a major security threat and are vulnerable to potential attacks because
they are given through an Open channel. Mirai [2] one of the most known attacks, it's a powerful Distributed
Denial of Service (DDoS), which is capable to create huge traffic using IoT devices. Surprisingly, there are
other several malware that can target these devices. The IoT devices are easily compromised due to the low
level of security installed. Therefore a secure and efficient scheme that guarantees confidentiality,
mutual authentication, privacy, and integrity is a very essential security requirement for IoT-cloud
environment. Most of the security protocols developed are based on Hypertext Transfer Protocol (HTTP) and
using classical identification methods such as Rivest Shamir Adleman (RSA). HTTP is powerful and wide

Journal homepage: http://ijeecs.iaescore.com
Indonesian J Elec Eng & Comp Sci ISSN: 2502-4752 O 1461

used-protocol [3] but it’s relatively expensive in terms of implementation code-space and network resource
usage. RSA [4] is the most known cryptography algorithm, that uses public and private keys to secure
communications between two entities, and for a strong complexity of the security protocol, the size of the
key must be huge. Unfortunately, this cannot be handled by IoT devices because of the limitation of
resources they have such as low storage capacity, computing capability, and limited battery.

This paper proposes a secure and lightweight mutual authentication scheme based on Constrained
Application Protocol (CoAP), and using Elliptic curve cryptography (ECC) as a strong asymmetric
cryptography method for IoT-Cloud environment considering computational costs.

1.1. Contribution
Our contributions in this paper are as follows:

a) A lightweight secure authentication scheme has been proposed Cloud of things, to secure lacks of
existed scheme. Our proposed scheme guarantee mutual authentication and anonymity and resist to
known attack such as session key disclosure, replay and impersonation attack.

b) A formal security analysis was performed using AVISPA to prove the validity of the proposed
scheme against various attacks.

1.2. Organization

The rest of the paper is organized as follows. In Section 2 we introduce the related works. In Section
3 we will discuss the preliminaries of elliptic curve cryptography and CoAP. In Section 4, we propose a
secure and lightweight mutual authentication scheme for IoT in a cloud computing environment to address
the security lacks of the existed scheme. In section 5, performance analysis has been done. We verify in
section 6 the proposed protocol using Automated Validation of Internet Security Protocols and Applications
(AVISPA) tool. Lastly, we will conclude the section in 7 concludes.

2. RELATED WORKS

The security of hundreds of communication between IoT devices and Cloud computing requires
significant resources such as storage capacity, processing, and energy. Unfortunately, the security schemes
used nowadays to provide secure communication, either they uses classical cryptography methods that
require huge computational resources or they are vulnerable to several attacks. Schemes developed for the
IoT-Cloud paradigm can be ordered into schemes based on incorporating mutual authentication, key
exchange with a trusted party, Secure-ID authentication, directed Path-based Authentication (DPAS), session
key-based authentication schemes, and One-Time Password (OTP) based authentication.

Recently, to reduce the computational time for IoT devices, schemes based on the elliptic curve
have been implemented. ECC has become the most used cryptography algorithm to design lightweight
schemes. In 2009 Yang and Chang [5], based on Tian et al's authentication [6], developed a mutual
authentication protocol with session key agreement. This method is very sweetly for IoT devices, it does not
exhaust the resources of the objects, but unfortunately, this method is weak to offline password guessing,
and clock synchronization [7]. Other protocols based on ECC have been proposed for IoT-Cloud by Granjal
et al. [8], Ray et al. [9] and Jiang et al. [10] In 2015, a new protocol appeared, proposed by Kalra and Sood
[11], they gained experience from the previous methods. They proposed a mutual authentication scheme to
secure the transaction in a cloud of things using HTTP cookies, for a smart device that is HTTP clients.
The use of cookies to develop mutual authentication for smart devices was very innovative. In 2017 Kumari
et al. [12] after the analysis of their scheme showed that this algorithm is vulnerable against offline password
guessing and insider attack. That is to say, this scheme does not provide device anonymity.

In the last few years, researchers have become more leaning to lightweight protocols for the
communication on an intranet of things such as MQTT (Message Queuing Telemetry Transport) and CoaP
instead of HTTP because they are suitable for IoT devices. In 2018 We developed [13] a lightweight secure
mutual authentication based MQTT and using ECC, this scheme satisfies all the essential security
requirements needed for this convergence. In 2019 Ankur et al. [14] proposed lightweight authentication and
authorization scheme based on MQTT an ECC, unfortunately, this scheme doesn't expose the real role of the
MQTT broker and how the distribution of keys was done. Firas et al. [15] designed an algorithm that
implements CoAP using ECC in order to secure communication between IoT networks they simply used the
ECDH (elliptic curve Diffie-Hellman) protocol, they generated private and public key to encrypt and decrypt
messages. In [16] they proposed certificate key agreement protocol for IoT they replace DH and RSA
certificate used by DTLS [17] (Datagram Transport Layer Security) by ECDH. In [18] they proposed a
lightweight secure CoAP by compressing the standard security Protocol. They reduced the overhead of
DTLS by 6LoWPAN header compressor.

A lightweight secure CoAP for IoT-cloud paradigm using elliptic-curve cryptography (Amrani Ayoub)
1462 O ISSN: 2502-4752

3. PRELIMINARIES

As demonstrated in this document, the numbering for sections upper case Arabic numerals,
then upper case Arabic numerals, separated by periods. Initial paragraphs after the section title are not
indented. Only the initial, introductory paragraph has a drop cap.

3.1. Elliptic curve cryptography

In this section, we introduce the asymmetric cryptography method elliptic curves cryptography.
Nowadays to maintain a good encryption strength we need a 3072-bit key size RSA instead of 1024 bit.
RSA straight security required 1024-bit and 3072 bits for exceptionally valuable keys [19]. ECC with the
shorter keys length can provide the same security level than RSA. Therefore the advantage of ECC over RSA
is obvious. This small keys that offer ECC, allows us to design and implement strong and faster
cryptographic schemes, which makes ECC a very attractive option for the limited resource-constraint device.

Introduction to elliptic curve (EC)
Elliptic curves are the simplest curves after straight lines and conics. We can define an elliptic curve
E on a finite field denoted E(F) by its Equation to the form of Weierstrass:

E:y?+a,xy + agy =x? +a,x* +a,x +a, (1)
With a,,Q,,A3,a,eta,g EF

There are three main types of a finite field which can be used for the implementation of
cryptography for elliptical curves: prime field, binary field, and extension field. The order of a finite field is
the number of elements present in 1. Count the number of points of a defined elliptic curve on a finite filed is
one of the essential problems in the cryptography safe curves. In what follow we used the primer filed,
with p>3. The Weierstrass equation for an elliptic curve E(F,) on a finite prime field is represented with:

E:y? =x? +ax+bwitha,b € F, (2)

To be used in cryptography, the necessary condition is that the discriminant of the polynomial is
equal to 0. This condition guarantees that, for any point on the elliptical curve, passes one and one
single tangent.

f(x) =x? +ax 4+ b, A= 4a? + 27b7 #0 (3)

This group consists of two basic operations: Point doubling (2P) and point addition (P+Q) where P
and Q two different points in a curve.

Given P = (Xp,Yp) et Q = (%q,¥q) two points # oo of an elliptic curve E(F, ) on a finite field .
Geometrically, the point addition (P + Q), consists in taking the symmetric of the third point (P * Q) of
intersection of the line PQ with the elliptic curve. The point doubling is the special case of addition where P
= Q, we take the symmetric of the point of intersection of the tangent at P with the elliptical curve. If P and Q
are symmetric relative to the x-axis, in this case the line PQ intersects the curve at the point at infinity (which
is the zero of the group) and therefore Q = -P

The point addition and doubling can be calculated through the following equations and as shown in
Figures | & 2:

xX, = 2? — (Xp + Xq)
Vy =A* (x —x,) — Vy

 

 

A=-?4 for point addition
Xp—Xq
3x2+
A= " ~ for point doubling
Pp

Indonesian J Elec Eng & Comp Sci, Vol. 20, No. 3, December 2020: 1460 - 1470
Indonesian J Elec Eng & Comp Sci ISSN: 2502-4752 O 1463

 

 

 

Figure 1. Point addition Figure 2. Point Doubling

3.2. Constrained application protocol

CoAP is a specialized web Protocol for use in an Intranet of things, that runs over the UDP (User
Datagram Protocol), 3 it’s designed for M2M (Machine to Machine) Applications, this protocol is a variant
of the most used Protocol HTTP, that tries to get by with very limited resources, CoAP is designed to work
on micro-Controllers and to use minimal resources, both on the network and the device. CoAP is based on
Rest (Representational State Transfer), resources are available under a URL and Clients access these
resources using GET, POST, PUSH, and DELETE methods. Figures 3 & 4 shows the CoAP header format
and CoAP Transaction. Gives a brief detail description for CoAP header as shown in Table 1.

CON (UGe87) GE Tigi

(Tekken 0x08)

CoA
Chent
= ACK (tici- 97) 2.05 Content
(Tekken O<08) “16.0 ¢
GON (80°97) GET/igm
(Token 0x08)

CoAr
Chent

<_ACK (id=87) 4.04 Net Found
(TSken 0x06) “Not Fouad

 

Figure 3. CoAP Header

Table 1. Gives a brief detail description for CoAP header

Header Descriptive
ver CoAP version
T Type of CoAP message (Confirmable CON 0, Non-Confirmable NON 1,
Acknowledgement ACK 2, Reset RST 3)
oc Count Option
0 1 2 3
01234567890123456789012345678901

Message ID

 

Options (ifany),
Payload (If any) ...

Figure 4. CoAP Transaction

A lightweight secure CoAP for IoT-cloud paradigm using elliptic-curve cryptography (Amrani Ayoub)
1464 O ISSN: 2502-4752

3.3. Datagram transport layer security

DTLS is the primary secure protocol used to protect CoAP communications. It operates between the
transport and the application layer. This protocol consists of two layer, the lower one that contains the record
of the protocol and the upper one that contains the handshake, alerts and ChangeCipherSpec. To provide a
strong security transmission, CoAP default choice of DTLS parameters is 3072-bit RSA key which
unfortunately still huge for IoIT device. Figure 5. shows the structure of a DTLS message in an
IP/UDP datagram.

ClientHello

eee

Hello VerifyRequest [cookie]
ClientHello [cookie]

ServerHello

 

(Certificate)
ServerKey Exchange

(CertificateRequest)

 

ServerHelloDone
(Certificate)
ClientKeyExchange
(CertificateVerify)
ChangeCipherSpec
Finished
ChangeC ipherSpec
Finished
Application Data

Figure 5. DTLS Handshake protocol

4. PROPOSED SCHEME

In this section, we propose a CoAP based authentication protocol for smart devices ECC
cryptographic methods. We exposed in the previous section the known works to secure the transaction
between an IoT device and the cloud. The idea of using CoAP for smart device authentication is novel.
In this section, we propose a lightweight security mechanism based on CoAP. In this section, we discuss our
proposed scheme in detail including the entities involved, system model, and mathematical formulation
of the scheme.

In what follows, we will detail the proposed security scheme. Our mechanism consists of 3 parts as
showen in Figure 6. The first is the initialization where the Server initiates the parameters necessary for the
generation and distribution of keys. The second is the registration between the devices and the Server.
And finally, is the login and authentication, it's where the IoT devices authenticated to the Cloud Server.
Table 2 denotes the notations used in the proposed protocol.

Table 2. Notions used in this paper

Notation Description
ID; Identity of device i
ID. Identity of Cloud Server
Kin Random master key
r Random number
Zy Finite field group
P Large prime number of the order > 21©°
N,,N> Random numbers generated for ECC parameters
G Generator point of a large order n
H(.) Cryptographic one-way hash function
K Mutual auth key
C Encrypted messag
@ / Il XOR operator // Concatenation

Indonesian J Elec Eng & Comp Sci, Vol. 20, No. 3, December 2020: 1460 - 1470
Indonesian J Elec Eng & Comp Sci ISSN: 2502-4752 O 1465

4.1. Initialization phase

In our design it is the Cloud Server who is in charge of the generation and distribution of keys.
But before this step, the Cloud must initiates its parameters by choosing an elliptic curve equation.

y* =x° +ax +b over Z,, where Z, (p >2*°°) is the finite field group. The Cloud selects two field
elements a,b € Z,. These two elements must satisfy the following condition 4a? +27b* +0, G is the
base point of the elliptic curve with a prime order (n >21°°), and O be the point at infinity such that n x
G = O. Then it chooses random master secret key K,, from Z, and computes public key =G.K,, .
Finally broadcast the public parameters K, < (E,,G,p,L).

4.2. Registration phase
In order to register with the Cloud, the device send his J; — hUD; || rG )
i. The Server generates K; for every device A; — hA(K,, Il K;), where K,; = ACN || J; Il ID. ),
and stores A; = A,.G on the Device. The Cloud then computes the security parameters K, = K,, ®
K;, B; = hk, || J; || Aj) and stores B; = B;.G, K; corresponding to the identity 1D; of the Device i
in its database.
ii. Cloud > Device: K; , Aj.

4.3. Login & Authentication phase

i. The Device Calculates ECC point P, = N,.G in order to login with the Cloud Server, then computes
the P, = h(N,.A;).

ii. The device sends P,, P, and K; to the Server. This last computes A; — h(K,, || K;) by calculating
the K,, = K, ® K;. The Cloud then checks whether the value of

iii. P35 = h(P,.A,) is equal to the received one of P,.

iv. The Cloud checks P; ?= P,. Then selects a random number N,, and calculates the ECC point P3 =
N,.G, P, = N,.B;, and Sends P3, P, and K, to the Device.

v. The device computes B; = h(K, ® 1; ® A;) and calculate ECC point Ps = P;.B;, and compares the
value of P,; with the received one of P,.

vi. The device checks P,; ?= P,, then computes V; = h(P, Il K), where K = N,.P3 and sends V; to the
Server. The Cloud computes V;* = h((P,.A;) || K*) where K* = N,.P,. And compares the value to
the received value of V; to authenticate the device.

vii. The Cloud checks V;* ?= V;, after mutual authentication between the Ddvice and the Cloud Server.

5. SECURITY ANALYSIS
In this section, we give a informal security analysis to confirm the validity of the proposed scheme
against various attacks.

5.1. Informal Security Analysis
Our proposed security scheme can hold against various types of attacks:

a) Anonymity: The intruder cannot obtain the identity IDi of the device because it is masked by using
hash function J; =hUD,; \|rG) . In addition, the adversary cannot obtain random nonce r.
Consequently, our scheme provides anonymity.

b) Impersonation Attack: When an adversary MA assumes the identity of a legitimate User.
MA must successfully generate J; = h(U/D, || rG ). However, this can not be computed by the MA
because he cannot obtain the random nonce r of the user. Therefore our scheme is well protected
against the Impersonation attack.

c) Replay Attack: When an intruder MA may attempt to impersonate legal user eavesdropping the
communication and intercepts the data and re-transmits it. This cannot be happened because the
Cloud Server checks whether P; ?= P, and the device checks whether P, ?= P, therefor, our scheme
is Well protects against replay attack.

d) Mutual Authentication: After receiving {P,,P,,K,;} from the device, the CS checks
whether P; ?= P,, if it's correct the cloud authenticates the device. The same way, the device
receives {P3, P,, K,} checks whether P,;' ?= P,, then the device authenticate the CS.Hence our scheme
achieve mutual authentication among CS ans Device.

e) Session Key Attack: The intruder MA cannot computes the session key K because, there is noway
that he can obtain the nonces of the Server and Cloud N1 & N2. In addition MA cannot computes K.
Therefor, our scheme withstands the session key attack.

A lightweight secure CoAP for IoT-cloud paradigm using elliptic-curve cryptography (Amrani Ayoub)
1466 O ISSN: 2502-4752

Brute Force: So that the intruder can deploy a brute force attack, he needs to gain the security
parameters {P,, P,, P3, P,} from the messages exchanged between the device and the CS, even he processes
these parameters he cannot compute r.G. Therefore, our scheme can resist the brute force attack.

 

Initialization

Cloud chooses Ep: (4? 4+ ax + b)(mod p) where (407 4+ 27b*)(tnod p) = 0. ower Zp
Cloud master secret key Ai E Zp HM = G.Nm public key

G generator pout n.G ee, nie

Choose random master secret key Am & Zp Computes L = G. Xi

Broadcast public parameters Np — (£y,G.p. 1)

Device Cloud
Registration phase

Kah(IDy|| ra)

cP
mene Selects a random number N
Assigns pseudo identity A) as
Ky = ACN [1 Ky = Rey BAY
Ay = hh THAD) Ay =Aj.G
Bi = h(Ke Bh @ Ai). 8] = BG
Stores J; .B; , K;

fs {Ay A )
Login and authentication phase .
Selects a random nonce N,
Pi we Ny. G ; Ps m hi Ny. Aj)

(Py, Py, Ai)

— ——_—_—»
Nm = Ne @ A
Ay @ h (Km AD
P; e ACP. Ay )
Verifies P2 J.P:
If true, then selects a random nonce N2 and computer
Py = Nz. G; Py = Nz. Bi

(Py, Pa, Ky)
< ees
By = Atk, Bl B AL)
Pi = Py. B,
Verifies Pj. Ps
If true, then computes
K= Ni MS = Ny. NG
Vi = ACP2||K)
(Yj)
—_ >
A’ = Ne Pom Na. Ny G

Calculate Vi = Ac( Py. Ay)|| 8°)
Verifies V7 1.4
If true, the Cloud Server authenticates the device,

After mutual authentication, session key

 

Figure 6. Mutual authentication scheme

5.2. Security feature
The proposed scheme give a better security levels compared to firas et als and other existing

scheme.Table 3 shows the analysis results of the security features.

Table 3. Security Features comparison

Security feature Firas et al. Ours
Anonymity x O
Impersonation Attack x O
Replay Attack O O
Session Key Attack xX O
Mutual Authentication xX O
Brute Force x O

O , preserves the security features; x, does not preserve the security features.

6. SECURITY VERIFICATION WITH THE AVISPA TOOL

AVISPA [20] is a push-button tool for the Automated Validation of Applications and Internet
Security Protocols.It was developed in 2004 by Basin et Al as part of a European project.It is an automatic
analysis tool intended to assist in the validation of security protocols. He owns two major challenges: to be

Indonesian J Elec Eng & Comp Sci, Vol. 20, No. 3, December 2020: 1460 - 1470
Indonesian J Elec Eng & Comp Sci ISSN: 2502-4752 O 1467

efficient, while ensuring accessibility to non-specialists in the field. The tool can be used on small and
medium scale protocols (as provided in the Clark / Jacob library), as well as Internet security protocols at
large scale.

The protocols are implemented in High-Level Protocol Specification Language (HLPSL), which is a
formal role based language using which data structures, cryptographic operators,control flow patterns and
algebraic properties can be specified. The specification is rewritten in an IF intermediate format using a
translator. AVISPA uses 4 other tools (back-ends) which take the IF format as input, and which offer the

possibility of 4 different analyzes of the same protocol. Any language convertible to IF intermediate format
can be verified by AVISPA.

6.1. HLPSL specifications
We considered two basic roles: Device and Cloud. Then, we give the session and environment role

using HLPSL in Figure 9 & 10, which contains the security goals. The role specifications of device and CS
are shown in Figures 7 & 8.

6.2. AVISPA simulation result

The proposed scheme is analyzed using CL-AtSe and OFMC back-ends [20]. The intruder has full
control over the network in such a manner that all messages sent by the agents corresponding to the roles are
available to the intruder. The results of the execution shown in Figure 11 and Figure 12. Under this model,
the intruder may intercept, analyze or/and modify messages as long as he knows the required keys.
The attacker can act as any entity and send any message to some other agent participating over the
communication channel. The simulation results show that our scheme is secure

7. PERFORMANCE ANALYSIS
In this section we give a brief comparison between the proposed scheme and some existed mutual
authentication schemes. We compared the communication cost and the computational cost of this schemes.

 

 

 

role device (Dev, C5; agent, SKedics. symmetric_key, H * hash _func, 56, RB role Cowl (Dev, Co: agent
channel(dy)) SKedics: syrrervetric_bey
played_by Dev H : hash func
dete 56, RB. channelidy})
local State: nat, oleved by CS
id, li, Ki, 1d, Ka, Kem: text ~
GR, N1, Pi, P2, N2,N, SK, Vir text, ce
Fs hash_func incai Stete net
const secl, sec?2, alice _bob_fi, bob_alice_f2 | protocel_id 1 WiC, Mr, At, An tent
init State -° O 2 GC Ni. 2 NPS. OS beet
transition Ri el, Ke tent
UNM Registration phase r  hewh_ fun
1. State * 0 /\ RBl(atart) «|» 3 .
State’ #1 /\ A @ new() comet secl, sec? elice_boh ri, bob _esitee_ 32 orotocct_id
A Woe Wid LRG) intt Stete «0
/\ secreti (id), PUM'.G) ), see1, Dev) trangitioe
“Send the registration request (ll) to the CS securely
Svia secure channe! L State + © /\ ROC iid! FER GG) Secics) &) >
/\ SBC") _Skedics) Seste’ = 2. = wewl) A secret FOR. Gh sect, Dev
‘“Hecoive registration reply ( A‘l,Ki ) from CS teow’ = neal)
“via secure channel nh er =< EN id Ce FIR Gl
2. State = 1 A ROL(MIN Id M(t F(R’ GY) (Ker IN’ td eid ERG) )) a
}.G))_ SKedies) =|> Al 2 Wikre’ eT
State’ -@ 3 /\ secret((id_C), eecd, Dev) \ Air = PLA GS)
“Login and authentication phase \\ secret(id_C], sec2, Dev]
/AVNI' ot newt) /V PL om F(ND'.G) , SAC(Ki' Ai |_Seedics)
/\ 02" © HIND, PLR HON be Hd PUG) 9 1,.G))) 2 Stete = 2 /\ ROOFING) MPI
W5end login request (P1,.P2.Ki) to C5 vie open channel Pint’. P(e MON at CC Hped ete ici) xP2
/AVS0(P 22 MIN Id CC W(idi P(R'.G))))
/\ witness(Dev, C5, slice_bob_rl, N1') ee eT
“Receive (PS,P4,Ks) from C5 via open channel State’ © 4 /\ 2 « mew!) PS = Pi C)
4. State = 3 /\ ABl FIN2'G). % PS NAG oe ecet
FIN?” Fild(xorl sor
aor ecr{kin, HON Se C Pte FIR G))) 1. Mee
xor(Ken', HIN Id CO ifidl PERG) )) 16K HOP Gd
Wii F(R G) }) Mel FUME HN A CM FIR GID) 1G TRA
FIM( Kin HIN id _ C M(t FIR G))) 1G MA v
Gye"! ae
) MP2 Vol fii G
xor(Kirn’, MON td biti) PER GP) pets APS co Fin? Bel’)
\Es = sorties, MIM tC eefed FIR GG) leek
State © S/\ SK -@ FIND PIN? .G)) \ GR0P 3 Pa es)
AV VE om PCP ON PUP Reny Kt).G)). SK") \ witnestCS. Dew. bob stce r2. 2°)
% Send message ee C5 vie open channel 5. State = 4 /\ REQ FiS PH ere’ ei) GPa FIN? GI) =f>
\ S8(vi')
% Dev's acceptance of random nonce r2 generated for Dev by CS “% CS's acceptance of fevdom monte rl generated for CS by Dew
/\ requestics, Oev, bob alice 2, N2>) state -= 6 /\ request(Dev, CS, stice_beb_ri, 11
end role end roe
Figure 7. Device Role Figure 8. Cloud Role

A lightweight secure CoAP for IoT-cloud paradigm using elliptic-curve cryptography (Amrani Ayoub)
1468 O

role environment()
def=
const dev,cs : agent,

skedics : symmetric_key,
h, f : hash_func,
pl, p2, ki, p3, p4, ks, vi: text,
seci, sec2, alice_bob_ri1, bob_alice_r2: protocol_id
intruder_knowledge = {dev, cs, h, f,
p1, p2, ki, p3, p4, ks, vi}
composition

session(dev, cs, skedics, h)
/\ session (i, cs, skedics, h)
/\ session (dev, i, skedics, h)
end role

goal

secrecy_of secl

secrecy_of sec2
authentication_on alice_bob_ri
authentication_on bob_alice_r2
end goal

environment()

Figure 9. Environment role

% OFIVC
% Version of 2006/02/13

ISSN: 2502-4752

role session (Dev, CS; agent,

SKedics ; symmetric_key,

H > hash_furnc)

def=

local $B1, RB1, $82, RB2: channel(dy)
composition

device (Dev, CS, SKedics, H, SB1, RB1)
/\ cloud (Dev, CS, SKedics, H, $82, RB2)
end role

 

Figure.10 Session rdle

SUMMARY
SAFE

SUMMARY
DETAILS

sAre BOUNDED _NUMBER_OF_SESSIONS
DETARS TYPED_MODEL

BOUNDED _NUMBER_OF_SESSIONS
PROTOCO PROTOCOL
/home/span/span/testsuite/results/Test_algo_ these. if /nome/span/span/testsulte/results/Test_aigo_Uvese.if
GOA!

as specitied
BACKEND

GOAL
As Specified

OFMC BACKEND
CL-AtSe

 

Figure 11. Output of OFMC back Figure 12. Output of ATSE backend

7.1. Communication cost
Before we compute the total communication costs for our scheme, we assume that the identity ID,
Nonce's N, Random number R and all security parameters are 224 bit long. The output for a hash function is
256 bits (sha-2) and the elliptic curve cryptosystem is ECC - 256 bits.
The transmitted messages in the proposed scheme:
a. {P,,P5,Kj,V;} = {256 + 256 + 256 +256} = 4*256 = 1024 bits.
b. {P3,P,, K,} = {256 +256 +256} = 3*256 = 768 bits.

The total communication cost is 1792 bits. Table 4 resume the analysis results of
communication cost.

Table 4. Summary of communication cost

Schemes Total Cost
Zhou et al.[21] 4352 bits
Xue et al.[22] 3840 bits
Amin et al.[23] 3456 bits

Ours 1792 bits

Indonesian J Elec Eng & Comp Sci, Vol. 20, No. 3, December 2020: 1460 - 1470
Indonesian J Elec Eng & Comp Sci ISSN: 2502-4752 O 1469

7.2. Computational cost
We compared the computation overheads of our scheme with some discussed schemes [21-23].

We consider using the following parameters, to analyze computation cost. Table 5 shows the detail total cost
and the analysis results of computation cost as below.

a) T;, denotes the time for the hash function.

b) Tem The computational cost of a ECC point.

c) Weignore XOR operation, because it is negligible compared to the other operations.

d) multiplication operation

Table 5. Summary of computational cost

Schemes Device CS Total
Zhou et al. 13T, 30T;, 43T,
Xue et al. 12T,, 24T, 36T;,
Amin et al. 12T,, 18T, 30T,
Ours AT), +47 om 5T,+4T em 9T), +8T rem

8. CONCLUSION

IoT-cloud paradigm bring many application and services to humanity in different fields such as
healthcare, transportation and logistics, smart environment as well as personal and social domain. The only
way that these objects can be effective and productive in large scale and with a safe use is to provide a strong
secure protocol to protect the entities involved also to guarantee the integrity and the confidentiality of
transmitted information.

In this paper we proposed a lightweight secure scheme based on the light-weightiness of the the
ECC, to reduce the size of the key to save the resources of the IoT devices and not be exhausted. We also
incorporates the concept of CoAP to reduce the overhead and also for smooth communication int IoT-Cloud
environment.We presented a formal security analysis of the proposed protocol using AVISPA. Furthermore,
we give a brief comparison of the security performance and features of our scheme with some already
existed. We've proven that that our protocol provides better efficiency and safety than related schemes.
Therefore, our scheme can be suitable for practical IoT-Cloud environment. As future work, we are working
on a comparison between the scheme that we've developed using MQTT & ECC [13] and this proposed
scheme based on CoAP&ECC to define which one is suitable for loT-Cloud paradigm.

REFERENCES

[1] B.Grobauer, T. Walloschek, E. Stocker,"Understanding cloud computing vulnerabilities" IEEE Security & Privacy,
vol. 9, pp. 50-57, 2010.

[2] M. Zane, A. Manos, et al., "Understanding the Mirai Botnet", 26th USENIX Security Symposium,
pp. 1093-1110, 2017.

[3] C Bormann, AP Castellani, Z Shelby, “CoAP: An Application Protocol for Billions of Tiny Internet Nodes”, [EEE
Internet Computing,vol 16, no. 2, pp. 62-67, 2012.

[4] P. Mahajan., A. Sachdeva, “CA study of encryption algorithms AES, DES and RSA for security”, Global Journal
of Computer Science and Technology, vol. 13, 2013.

[5] Jen-Ho Yang and Chin-Chen Chang, “An ID based remote mutual authentication with key agreement scheme for
mobile devices on elliptic curve Cryptosystem’, Computers & security-elsevier, vol 28, no. 3&4, pp. 138-143,

2009.
[6] Xiaojian Tian, D.S. Wong, and R.W. Zhu, “Analysis and improvement of an authenticated key exchange protocol
for sensor networks’, 2005 IEEE Communications Letters, vol 9, no. 11,

pp. 970-972, 2005.

[7] W. Ding, M. Ying, M. Chunguang, and C. Zhen-shan, “Comments on an Advanced Dynamic ID-Based
Authentication Scheme for Cloud Computing”, 2012 International Conference on Web Information Systems and
Mining , pp. 246-253, 2012.

[8] G. Jorge, M. Edmundo and S. Jorge, “End-to-end transport-layer security for Internet-integrated sensing
applications with mutual and delegated ECC public-key authentication.”, 2013 IFIP Networking Conference, pp. 1-
9, 2013.

[9] R. Sangram, and G P. Biswas, “Establishment of ECC-based Initial Secrecy Usable for IKE Implementation”, 2012
World Congress on Engineering, vol. 1, 2012.

[10] J. Rong, L. Chengzhe, L. Jun, W. Xiaoping, and W. Hong, “EAP-Based Group Authentication and Key Agreement
Protocol for Machine-Type Communications”, 2013 International Journal of Distributed Sensor Networks, pp. 2-
14, 2013.

[11] K.Sheetal, and K. Sood, “Secure authentication scheme for IoT and Cloud servers”, Pervasive and mobile
computing, vol. 24, pp. 210-223, 2015.

A lightweight secure CoAP for IoT-cloud paradigm using elliptic-curve cryptography (Amrani Ayoub)
1470 O ISSN: 2502-4752

[12] K. Saru, K. Marimuthu, K. Ashok, L. Xiong, W. Fan, and K. Neeraj, “A secure authentication scheme based on
elliptic curve cryptography for IoT and Cloud servers”, The Journal of Supercomputing,vol. 74, pp. 6428-6453,
2017.

[13] A. Amrani; N. Rafalia, J. Abouchabaka, “lightweight secure scheme for IJoT-Cloud convergence based on elliptic
curve”, Journal of Theoretical and Applied Information Technology, vol. 96, no. 1, pp. 144-155, 2019.

[14] L. Ankur, Karambir, “ECC based inter-device authentication and authorization scheme using MQTT for IoT
networks”, Journal of Information Security and Applications, vol. 46, pp. 1-12, 2019.

[15] A. Firas, A. Ammar, A. Majd, A. Omar, “ Security-aware CoAP Application Layer Protocol for the Internet of
Things using Elliptic-Curve Cryptography’, The International Arab Journal of Information Technology, vol. 15,
pp. 550-558, 2018.

[16] R. Shahid, S. Hossein, H. Kasun, H. René, and V. Thiemo, “Lithe: Lightweight Secure CoAP for the Internet of
Things”, IEEE Sensors Journal, vol. 13, no. 10, pp. 3711-3720, 2013.

[17] R. Shahid, T. Daniele, V. Thiemo, “6LoWPAN Compressed DTLS for CoAP” ”, 2012 TEEE 8th International
Conference on Distributed Computing in Sensor Systems, pp. 287-289, 2012.

[18] Geoff Mulligan, “The 6LoWPAN Architecture”, 2007 the 4th workshop on Embedded networked sensors,
pp.87.82, 2007.

[19] B. Hancock. “Security views”. COMPUTERS & SECURITY, vol. 18, no. 7, pp. 553-564.

[20] The AVISPA Team. (2003) AVISPA. Deliverable 2.1: The High-Level Protocol Specification Language, 2003.

[21] L. Zhou, X. Li, K.H Yeh, C. Su, W. Chiu, “Lightweight IoT-based authentication scheme in cloud computing
circumstance”, Future generation computer system, vol. 91, pp. 244-251, 2019.

[22] K. Xue, P. Hong, C.A Ma, “Lightweight dynamic pseudonym identity based authentication and key agreement
protocol without verification tables formulti-server architecture”, Journal of Computer and System Sciences, vol.
80, no. 1, pp. 195-206, 2014.

[23] R. Amin, N. Kumar, G.P Biswas, R. Iqbal, V.A Chang, “lightweight authentication protocol for IoT-enabled
devices in distributed cloud computing environment’, Future generation computer system,
vol 78, pp. 1005-1019, 2018.

[24] K. Yokoyama, M. Yasuda, Y. Takahashi and J. Kogure, “Complexity Bound on Semaev’s Naive Index Calculus
Method for ECDLP”’, Number-Theoretic Methods in Cryptology 2019.

BIOGRAPHIES OF AUTHORS

Ayoub amrani. He received his Master’s degree in computer engineering from University of Ibn,
Tofail, Kenitra Morocco. He is currently a PhD student in the IT laboratory, Computer and,
Telecommunications Research (LaRIT) in Kenitra-Morocco. His research interests include:
information security, cryptography, multi-agent systems, distributed computing

Najat Rafalia. She has obtained three doctorates in Computer Sciences at Mohammed V
University, Rabat, Morocco by collaboration with ENSEEIHT, Toulouse, France, and at Ibn
Tofail University, Kenitra, Morocco. Currently she is a professor at Ibn Tofail University,
Department of Computer Sciences, Kenitra, Morocco. Her research interests are in distributed
systems, multi agent systems, concurrent and parallel programming, communication, Security,
Big data and Cloud Computing

Jaafar Abouchabaka. He has obtained two doctorates in Computer Sciences applied to
mathematics at Mohammed V University, Rabat, Morocco. Currently he is a professor at Ibn Tofail
University, Department of computer Sciences, Kenitra, Morocco. His research interests are in
concurrent and parallel programming, distributed systems, multi agent systems, Genetics
Algorithms, Big Data and Cloud Computing

 

Indonesian J Elec Eng & Comp Sci, Vol. 20, No. 3, December 2020: 1460 - 1470

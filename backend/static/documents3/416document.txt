Optimization and Engineering (2020) 21:1665-1690
https://doi.org/10.1007/s11081-020-09493-z

RESEARCH ARTICLE

m)

Check for
updates

Convex optimization techniques in compliant assembly
simulation

Maria Stefanova' - Olga Minevich? - Stanislav Baklanov! -
Margarita Petukhova' - Sergey Lupuleac' - Boris Grigor’ev' -
Michael Kokkolaras*

Received: 13 June 2019 / Revised: 19 February 2020 / Accepted: 19 February 2020 /
Published online: 6 March 2020
© The Author(s) 2020

Abstract

A special class of quadratic programming (QP) problems is considered in this paper.
This class emerges in simulation of assembly of large-scale compliant parts, which
involves the formulation and solution of contact problems. The considered QP prob-
lems can have up to 20,000 unknowns, the Hessian matrix is fully populated and
ill-conditioned, while the matrix of constraints is sparse. Variation analysis and opti-
mization of assembly process usually require massive computations of QP problems
with slightly different input data. The following optimization methods are adapted
to account for the particular features of the assembly problem: an interior point
method, an active-set method, a Newton projection method, and a pivotal algorithm
for the linear complementarity problems. Equivalent formulations of the QP prob-
lem are proposed with the intent of them being more amenable to the considered
methods. The methods are tested and results are compared for a number of aircraft
assembly simulation problems.

Keywords Quadratic programming - Aircraft assembly - Contact problem -
Variation simulation analysis - Massive computations

><] Maria Stefanova
stefanova.m @list.ru

b<] Olga Minevich

minewitsch@rambler.ru

Peter the Great St. Petersburg Polytechnic University, Saint Petersburg, Russia
Technische Universitat Miinchen, Munich, Germany

3 McGill University, Montreal, Canada

Q) Springer
1666 M. Stefanova et al.

1 Introduction

In the last decade a new modeling approach has been developed and applied to vari-
ation simulation and assembly optimization in aerospace and automotive industry
(see Lupuleac et al. 2010, 2011, 2019b; Dahlstr6m and Lindkvist 2007; Lindau et al.
2016; Yang et al. 2016). This approach considers the contact interaction between
compliant parts. By using the variational formulation (Galin 1961; Tu and Gazis
1964; Lions and Stampacchia 1967; Kinderlehrer and Stampacchia 1980) and the
substructuring (Turner et al. 1956; Guyan 1965; Wriggers 2006; Petukhova et al.
2014), contact detection is reduced to a quadratic programming problem that allows
for large-scale computations of contact problems during variation simulation and
assembly optimization. Since the accuracy of the assembly model influences the
simulation results, it is important to use fine FEM meshes that can reflect the most
essential features of assemblies. Implementation of highly refined computational
meshes and need for massive computations of problems with slightly different input
data require choosing appropriately tailored solvers for the QP problem; that is the
primary objective of the present paper.

The paper is organized as follows: in Sect. 2 the contact problem arising in
assembly simulation is presented and its features are described; task-level paral-
lelization is also discussed. Section 3 is dedicated to the adaptation of numerical
methods for solving the described contact problem. In Sect. 4 computational results
for the adapted methods are provided and discussed for several problems of aircraft
assembly simulation. Conclusions are presented in Sect. 5.

2 Formulation of contact problem

A finite element model of several parts fixed in an assembly jig is schematically
shown in Fig. 1. This kind of assembly is of sandwich type, 1.e., at least three parts
are lap-joint. The assemblies with no intermediate parts are called simple (for
instance, the assemblies consisting of two parts). The area where the parts overlap
is called the junction area. The finite element meshes of the parts are assumed to
be conformal. The nodes of the finite element model that are located in the junc-
tion area are denoted as computational nodes. These nodes are highlighted in Fig. 1.
The degrees of freedom in the computational nodes considered in the analysis are
arranged into the vector x € R”, where n is the dimension of the problem. Although

Fig. 1 Schematic outline of the
assembly

 

Q) Springer
Convex optimization techniques in compliant assembly... 1667

Fig.2 Cross section of the f
assembly

x usually contains only normal displacements, tangential displacements and rota-
tions can also be included.

Relative tangential displacements are assumed to be small; therefore, a node-to-
node contact model is used. According to this model only the predefined pairs of
nodes can come in contact. Figure 2 depicts the corresponding pairs of nodes in
the junction area connected with arrows. In sandwich-type assemblies some nodes
can belong to two pairs simultaneously. The initial distance between corresponding
computational nodes is given by the vector of initial gap g € R”, where m is the
total number of contact pairs.

As a rule, the fasteners are modeled in two ways depending of their type. The
temporary fasteners used in the aircraft assembly usually provide the fastening load
by means of prestressed spring. Such fasteners are modelled by the loads applied to
computational nodes. The permanent fastening elements (e.g., rivets or bolts) are
modelled by constraining the relative displacements of parts in the corresponding
computational nodes. In some cases, these two ways are combined by applying the
normal fastening load while also constraining the relative tangential displacement of
the assembled parts.

By using the substructuring the contact problem can be reformulated in QP form
(see Lupuleac et al. 2011, 2019a for details):

. I
min 5x! Kx —f'x,

1
S.t. A'x—g <0, ()

where f € R” is the vector of loads (for example, loads from fastening elements),
K € R”*" is the reduced stiffness matrix computed using finite element analysis, and
A € R”” (n > m) is a linear operator that defines the contact pairs.

As a rule, contact problems arising in assembly simulation have a number of
unknowns that varies from 1000 to 20,000. The mechanical properties of the struc-
ture, the influence of assembly jig type, and the configuration of the joining parts are
described by the stiffness matrix K and the constraint matrix A. When performing
a series of computations, these matrices do not change. This feature is exploited to
define some auxiliary matrices based on matrices K and A once for every assembly
model. Matrix K is symmetric, positive-definite and ill-conditioned. It has block-
diagonal structure with fully populated blocks. The number and the size of the
blocks are defined by the number of assembled parts and the number of considered
degrees of freedom in computational nodes in each part. Matrix A, which defines

Q) Springer
1668 M. Stefanova et al.

the pairs of nodes that can come in contact, is sparse in the considered problems:
every column of the matrix contains | or 2 non-zero elements.

The analysis of assembly quality involves the simulation of shape variations of the
joined parts. The shape variations are caused by tolerances in manufacturing, position-
ing, fixating, etc. In industrial applications (e.g., see Lupuleac et al. 2019b) the variation
simulation is realized by generation of the large number of initial gap vectors g (cloud
of gaps) and subsequent massive solving of contact problem (1). Such an approach can
be considered as generalization of the Method of Influence Coefficients proposed in
Liu and Hu 1997.

2.1 Equivalent formulations of the QP problem

Considering that the matrices K and A are usually the same for the series of computa-
tions during aircraft assembly simulation and optimization, problem (1) can be refor-
mulated in a form that is more attractive from a computational point of view. Specifi-
cally, the size of the QP problem can be reduced and the form of the constraint matrix A
can be simplified. Consider two different reformulations of problem (1): dual problem
and relative problem.

The dual formulation of problem (1) is given by

max — sATOA +p'At+s,

2
st. A>O, 2)

where A € R’” is the vector of Lagrange multipliers corresponding to contact forces
in the junction area, Q = A'’K'AER”™” is a Symmetric positive-definite fully
populated matrix, p = A’K 'f —g ER” and s = —>f "K'f eR! (Lupuleac et al.
2013).

The relative formulation of problem (1) is based on a vector of relative displace-
ments in the junction area defined as u = A’x € R” and may be obtained through
the minimax form of the problem. First, an additional relation should be derived from
optimality conditions. By multiplying the stationarity condition Kx —f + AA = 0 with
A'K ‘we get

u—A'K'f+QA=0.
Excluding J the relation that binds variable x to u is obtained:
x=K'f-K"'AQ)(A'K 'f —u) =K'AQu.

Substutuing x to the Lagrangian function L(x, A) = se Kx —~f'x+(A'x—g)'A
yields:

L(u, A) = suOnu —f'K'AQ'ut+(u-—g)'A.

Then the minimax form of the problem is

Q) Springer
Convex optimization techniques in compliant assembly... 1669

min max L(u, A).
u<g Az>0

Calculating the maximum, we obtain a relative formulation of problem (1):

- 1 Tg a0
min su" Ku —f u,

3
st. u-—g <0, @)

where K = (A’K"'A)"! © R™™" is a Symmetric positive-definite fully populated
matrix and f = KA’K 'f € R”.

All the listed formulations of the QP problem are equivalent and their solutions
are connected by the following formulas:

x =K'(f —Ad),
A=f —Ku.

Two more formulations arise when applying the Newton projection method and
pivotal algorithm for aircraft assembly problems. The Newton projection method is
only applicable if the constraint matrix is the identity (see Sect. 3.3 for details). To
solve the primal problem (1) with general constraints A’x — g < 0 a change of vari-
ables is proposed. If the total number of constraints is less than the number of vari-
ables, extra rows are added to the matrix A’ to make it square. The proposed idea is
to add unit vector rows in such a way that the new matrix becomes nondegenerate.
This technique allows to keep the constraint matrix sparse. Thus, a new variable

~ at T .. . .
X=AXxX= |A,a,, Lovee ,a,,| x is introduced and a change of variables in the func-

~—1
tional F(x) = F(A Xx) is made. Finally, fictitious constraints la, doe ,4,| "x < +00
are introduced, and problem (1) 1s reformulated as follows:
. jarre-laeT.  ppx-Te
min 5 A KA x-f'A Xx, (4)

where & = [g’, +oo]’.
The pivotal algorithm considered in the paper is used to solve linear complemen-
tarity problems LCP (q, M) that consists in finding the vectors w,z € R® such that

w=q+Mz,
zw =0, (5)
w>0,z>0

for given a vector g € R™ and a matrix M € R**" or in concluding that no such pair
of vectors w, z exists; NV denotes the dimension of the LCP (g, M). How the problems
(1)-(3) can be formulated as LCP the reader may find in Sect. 3.4.

The basic information about the formulations (1)—(4) such as the number of vari-
ables, the number of constraints, type of constraints and structure of Hessian, is pre-
sented in Table 1. The details of the LCP formulations are described in Sect. 3.4.

Q) Springer
1670 M. Stefanova et al.

Table 1 Comparison of equivalent formulations

Number of vari- |= Number of con- Type of constraints Number of
ables straints blocks in
Hessian
Primal (1) n m Linear inequality *
Primal (4) n n Bound 1
Dual (2) m m Bound 1
Relative (3) m m Bound 1

*Equal to the number of joined parts

2.2 Specifics of parallelization for considered problems

The most important computational feature of the contact problem arising in vari-
ation simulation is the need to carry out many similar computations for the same
large-sized assembly model; namely, to calculate the displacements for different
sets of forces F = {f;}? and for different variants of the initial gap G = { g,}*. The
total number of the serial computations can reach up to 10° runs during varia-
tion simulation and assembly optimization for each assembly model. Usually,
both variation simulation and assembly optimization can be parallelized by tasks
(Pogarskaia et al. 2018): each task refers to solving a particular QP problem (see
Fig. 3). Thus, parallelization of QP solvers is not needed and is therefore not con-
sidered in this paper.

Task parallelization gives a rise to another computational feature. Namely, the
effect of the dependence of computation time on input data for different solv-
ers is enhanced. For some numerical methods the number of active constraints at
the optimum n.,,, affects computation time significantly, thus becoming an essen-
tial characteristic of optimization problem when computation time is analysed.

Data preprocessing for Stiffness matrix K
QP problem solving Matrix of constraints A

 
   
   
  

Set of fastening forces F = { f;}”

Variation simulation analysis
Cloud of initial gaps G = {g;}* taro Sima Ue

 
 

Sp-1 QP

QP QP 1... problem

  
   
  
 
 

problem ...| problem solving
QP QP 1 ... problem
problem ... | problem solving anes 9 Soa
solving solving Gk, f2
gi, fi 9k fi

  

Statistical analysis of results

|
|
I
I
I
I
I
|
|
|
|
|
|
I
QP *++ | solving solving 9k fp
!
|
|
|
|
I
I
I
I
I
|
|
)

Fig.3 Task parallelization of computational process for an assembly model

Q) Springer
Convex optimization techniques in compliant assembly... 1671

Table 2 The dependence of number of active constraints ,., on input data

act

(a) Different fastening forces and constant initial gap 5mm

Vectors of forces F Percent of fasteners (%) Nact (2)
fi 5 3.1
ho 31 21.1
Ss 58 33.3
Ss 72 38.6
Fs 90 47.4
ts 100 52.3

(b) Different initial gap vector and 50% of installed fasteners

21 a 45.9
2> Zz a 46.1
83 Ea 44.2
24 rs 47.9
2s | 47.4
86 Pa: a 46.4

Table 2 presents the dependence of the number of active constraints n,,, for prob-
lem (1) on input data. An increase in the number of installed fasteners leads to an
increase in the number of active constraints n,,,. Variation of the vector of initial
gap generally does not affect n,., much. Note that in the remainder of the text
Nac; 1S the number of active constraints for problem (1), (3) and (4) and for prob-
lem (2) is equal to m — n,,-

3 Adaptation of QP methods for solving the contact problem

The paper is devoted to adaptation and comparison of various types of quadratic
programming methods applied to the contact problem. The following four widely
used quadratic programming methods are considered: the interior-point method, the
active set method, Newton projection method, and complementary pivot algorithm.
The interior-point method is a polynomial-time algorithm that has proved its effi-
ciency in practice (Gondzio and Grothey 2006; Byrd et al. 1999; Mehrotra 1992). It
allows to solve a wide range of optimization problems such as linear, convex quad-
ratic-programming, second-order cone programming, and semidefinite program-
ming problems (Wright 2005). This method is known to be one of the main meth-
ods used for solving large sparse problems and is implemented in many commercial
optimization software packages (MOSEK, CPLEX, IMSL, MATLAB and others).
Another class of optimization methods is active set methods. One of the most
commonly used active set methods for solving quadratic programming problems
was proposed by Goldfarb and Idnani in (1983). It is a dual active set method which

Q) Springer
1672 M. Stefanova et al.

proved to be fast and efficient for small to medium-sized problems (up to ten thou-
sand unknowns), see Burton and Toint (1992); Gaspero et al. (2011); Marron et al.
(1997). This paper focuses on the modification made by Powell (1985) that is pref-
erable for ill-conditioned problems (further referred to as ASM). This method is
also implemented in some well-known numerical libraries such as IMSL Numerical
Library (Rogue Wave Software 2016) and Scilab (2018).

Newton projection method is a second order modification of the gradient projec-
tion method, which is an extension of the steepest-descent method for constrained
minimization problems. The gradient projection method was proposed by Goldstein
(1964), Levitin and Polyak (1966) and Newton projection method was thoroughly
developed by Bertsekas (1976, 1982). It is easily implemented and highly effective
if constraints have the form x — g < 0, as the projection operator is just a minimum
operator in this case. Newton projection method works well for large-scale prob-
lems, but is not popular with researchers due to the fact that its basic version has a
low convergence rate.

Convex quadratic problems can be formulated as linear complementarity prob-
lems. One of the most commonly used methods for solving problems of this type is
complementary pivot algorithm (CPA) or Lemke’s method, introduced by Lemke
(1968). Lemke’s method is widely used because of such features as finiteness, reli-
ability and efficiency (Cottle et al. 1992; Acary and Brogliato 2008). Several numer-
ical packages include implementations of Lemke’s method such as Siconos (Acary
and Pérignon 2007) or GAMS PATH (Ferris and Munson 2018).

The theoretical estimations of computational complexity do not allow choosing
the indisputable leader among these methods for the contact problem solving (see
Table 3). Note that Table 3 presents a comparison for the primal formulation of the
contact problem (1). For the dual and relative formulations (problem (2) and (3),
respectively), the number of blocks p in the stiffness matrix K is 1 and the number
of unknowns n is equal to the number of constraints m.

All algorithms have polynomial time on average with a close degree of the poly-
nomial. In particular, computation time depends on the number of active constraints
at the optimum 7, and the number of conjugate gradient method iterations n,, when
iterative method is used for linear system solving. Typically, the number of active
constraints n,,, can run over [0, m] for an assembly model. It can take small values
as well as large ones when solving a set of similar contact problems as n.,,, 1s defined
by the vector of applied forces f and the vector of initial gap g (Table 2). Number
of iterations n,, depends on the condition number of the stiffness matrix K and the
quality of the applied preconditioner. Typically, the condition number is 10° — 108
for the considered type of contact problems.

While solving a set of similar contact problems, some of the time-consuming
operations can be performed once. These operations include the Cholesky decompo-
sition of the stiffness matrix K, the inversion of the Cholesky matrix, and the reor-
dering of constraints and stiffness matrices. The time required for such data preproc-
essing is presented in the third column of Table 3. It differs for particular algorithms
depending on required operations. The details of implementation and adaptation to
the features of contact problem are discussed in the following subsections.

Q) Springer
Convex optimization techniques in compliant assembly... 1673

Table 3 Comparison of algorithms

Computation time Required memory Time for
data prepa-
ration

Primal-dual interior-point method O(n 1,4 1n( +)) Oy O(n?)
Active set method OW? Mg) O(n?) O(n)
Newton projection method O(n = Nger)*) O(n’) O(n’)
Complementarity pivot algorithm O((n + m)?) Oy ne? O(n?)
Nac» Number of active constraints at the optimum (0 <17,., <m); nN... number of conjugate gradient

method iterations; p, number of blocks in the stiffness matrix K; n;, number of unknowns of i-th part; €,,,
threshold related to desired accuracy

3.1 Interior-point method

The primal-dual interior-point method (IPM) reformulates the problem of con-
strained minimization (1) as a sequence of unconstrained minimization problems
using a logarithmic barrier:

| T m
min 5x! Kx —fox—U yal In(—a;x + g;), (6)

where y is the barrier parameter and a; is the j-th column of A. The solution of prob-
lem (6) converges to the solution of problem (1) when yp goes to zero. At each itera-
tion IPM solves a system of nonlinear equations (7) that represents the first order
optimality conditions for problem (6):

Kx —f+AA 0
S,@,y,A)=| A’x-gty |=|0},y>0, 120. (7)
AYe — pe 0

In the system above, A and Y are diagonal matrices with 4 and y = ~A'x +g on
their diagonals and e = 1,, is a vector of ones. One step of Newton’s method is used
to find an approximate solution of system of linear equations (7) and then the duality
gap 1s updated. The process is repeated until 4 becomes sufficiently small.

There are two challenging issues related to the implementation of the interior-point
method when solving the contact problem: the selection of a starting point and the solu-
tion of the linear system for determining the Newton direction. There are two variants
of the algorithm, namely feasible and infeasible, which call for the fulfilment of differ-
ent conditions on the starting point. Feasible IPM requires starting points that satisfy
the following conditions:

Kx —f +Ad=0, (8)

A’x-—gt+y=0, (9)

Q) Springer
1674 M. Stefanova et al.

y>0,2>0, (10)

whereas for infeasible IPM, a starting point needs only satisfy the inequality condi-
tions (10). So, for the infeasible IPM the starting point search process is simplified
considerably. Note, that the theoretical worst case complexity is better for the fea-
sible IPM, although the infeasible IPM is known to have practically more efficient
implementations (Gondzio and Terlaky 1995). The choice of starting point for solv-
ing contact problem is discussed in Stefanova et al. (2018), where the starting point
for feasible IPM is determined based on the physical interpretation of the QP prob-
lem (1), and is compared to the infeasible one with the starting point from D’Apuzzo
et al. (2010). When applying IPM to assembly problems, a feasible IPM is preferred
for assembly models with junction area of simple type, whereas for more compli-
cated sandwich type joints the algorithm described in Stefanova et al. (2018) does
not have direct physical justification; an infeasible IPM yields better results in this
case (see Table 4).

The most time consuming IPM step is the solution of the linear system of equations
for determining the Newton direction:

K 0A) Ax Sy
VS,,(x,y,4) =] AT I 0 ff Ay [=] 85 |, (11)
0 AY} Ad $3

Table 4 Number of IPM iterations for different starting point approaches

Simple type assembly

Dual (2)

Nact Feasible Infeasible
n= 6112,m = 3056

333 22 24

A479 21 25

591 22 25

780 21 25

1017 21 25

1353 20 24
Sandwich type assembly

Dual (2)

Nact Feasible Infeasible
n = 4268, m = 2716

128 42 27

272 38 27

543 39 28

876 42 27

1103 38 27

2004 38 25

Q) Springer
Convex optimization techniques in compliant assembly... 1675

Where J is the identity matrix, s,; =—(Kx-—f+AA), s,= —(A'x-—g+y),
S, = —(AYe — ope), and o is the centering parameter chosen adaptively (Mehrotra
1992). A challenging numerical issue is the increase of condition number as the opti-
mal solution is approached. To solve the system of equations (11), one can use direct
or iterative approaches. Direct methods are based on decomposition techniques
(Gondzio and Grothey 2006) and can be efficient if the problem is sparse or parallel-
ization is possible. When the problem is large-scale, an iterative approach with the
use of an appropriate preconditioner is preferable. Several different approaches for
a set of contact problems arising in assembly simulation are discussed further and a
preconditioner attractive for the considered type of problems is proposed.

The system of equations (11) is first transformed to an augmented system (12)
and then to a normal system (13):

K A Ax \ _ Sy
AT —a'y }\ aa) = \5,- A's, (12)

HAA =p, (13)

where H = A'’K'A+A'Y, p=A'K™'s, + A~'s; —85, Ax and Ay can be com-
puted using the relations Ax = K"\(s, — AAA), Ay = Aq '(s3 — YA). The augmented
system is symmetric indefinite. For the class of problems considered in the paper,
solving the system of equations (12) turned out to be significantly less efficient com-
pared to solving the normal system, therefore it is not considered in the paper. The
normal system has smaller dimension; it is symmetric, positive definite and fully
populated. The system of equations (13) is solved directly using Cholesky decompo-
sition and iteratively using preconditioned conjugate gradient method (CG).

Three preconditioners are considered and compared in this paper. The first one
is a Jacobi preconditioner P, = diag(/) that is based on the diagonal elements of
matrix H. The second one is an incomplete Cholesky preconditioner P, = LyLy’.
The incomplete Cholesky factorisation is applied to the matrix H,. = H, + aI, where
a is a regularization parameter and H, is a sparse approximation of matrix H. Paper
(Lin and Saigal 2000) presents a brief review of several existing approaches to
define sparsity pattern for dense matrices based on dropping elements with small
magnitude from H. The incomplete Cholesky preconditioner uses more information
about matrix structure compared to P,; however its efficiency depends on the param-
eters such as the number of non-zeros in H, and the value of regularization param-
eter a. While the number of CG iterations is reduced with the increase of the amount
of non-zeros in H,, the time required to build the preconditioner increases. By vary-
ing the number of non-zeros, the preconditioner with 50% of the largest elements of
the original matrix H (and all other elements substituted by zeros) was chosen as the
fastest. The regularization parameter a is chosen adaptively starting from a = 0; the
regularization parameter is increased if the incomplete Cholesky factorization fails.

The third preconditioner proposed for assembly problems (Stefanova et al.

2018) is a split preconditioner P; = (Lg + VA'Y)(Lg + VAY)’, where Lg is
the Cholesky decomposition of the matrix Q = A'K"'A. The strong point of the

Q) Springer
1676 M. Stefanova et al.

proposed preconditioner P, is the combination of the possibility to be updated
quickly at each IPM iteration with a good approximation of H. The matrix Lg does
not change from iteration to iteration, so only the diagonal terms V A7'Y must be
modified to update the preconditioner. Moreover, the Cholesky decomposition Lg
can be performed once per assembly model.

All of the described approaches are compared in Table 5. The table presents the
time necessary to solve contact problem. The computations were done on an Intel
Core i5 CPU 3.30GHz computer with 16 GB of RAM. Two sets of problems with
different vectors of forces f are considered for wing assembly models with 4386 and
6112 variables. The computational results show that the iterative approach with pre-
conditioner P is considerably faster.

Thus, to solve the system of linear equations the adapted IPM uses CG method
with the combined preconditioner P, and an appropriate starting point is chosen
depending on the assembly model.

3.2 Active set method

The main goal of active set methods is to find the set of constraints that are active at
the solution point:

Lopt = {i= 1,2,...,n | (A’x,,,-8), = oO.

An initial approximation of the active set L, is chosen and then one constraint is

added or removed at each iteration forming the current active set It Since the

number of constraints is finite, iteration process finishes after finite number of steps
(Boland 1996).

Table 5 Computation time (in Dual (2)
seconds) of IPM with direct and
iterative approaches for solving _—n,, Direct Iterative P, Iterative P, Iterative P,

system of equations (13)
n = 4386, m = 2193

20 663 55 217 48

378 736 126 444 59

695 771 210 489 68

1830 502 279 597 43

2193 502 337 532 14

n = 6112,m = 3056

333 2119 929 2830 496
479 2017 1050 3068 472
591 2119 1241 3530 501
780 2025 1316 3525 440
1017 2031 1446 3700 412
1353 1929 1541 3524 361

Q) Springer
Convex optimization techniques in compliant assembly... 1677

The dual Goldfarb-Idnani active set method, considered in this paper, starts at the
point of the unconstrained minimum of problem (1), 1.e., x) = K vl f, D. = @.
If the non-penetration conditions are violated, the iteration procedure starts.

At each step, current point x, is forced to satisfy one of the violated constraints
in such a way that (A’x;, — g)x =0, and the objective function of problem (1) is

minimized over the set i. U {ik \. The process continues until the point x, is in
the admissible set, meaning that the solution is found.

In the case that it is not possible to satisfy any constraint during the iteration
step, the rollback is performed: the point is shifted in such a way that one of the
current active constraints is violated again.

It is worth mentioning that the iteration step is made in both primary and dual
spaces (not only the point is shifted but also the Lagrange multipliers).

In order to speed up the computations several modifications of the described
algorithm are proposed that make use of the input data structure given in the par-
agraph 2 and take the algorithm specifics into account.

1. Storing only the non-zero blocks of the matrix K allows the reduction of the time
necessary for the calculation of the objective function and its gradient, because
the number of multiplications is decreased from (n - p)* to p - n*, where p is the
number of blocks and n is the number of variables in the block.

2. At each iteration step, the next constraint to be satisfied is chosen. In the original
version of algorithm, the first most violated constraint is taken into consideration:
Inext = alg Max j_7,, (alx — gi). A more complicated procedure is introduced for
the described algorithm relying on the fact that if a force is applied to a computa-
tional node, it means that a fastening element is installed. The gap is then assumed
to be closed, and the corresponding constraint must be added to the current active
set.

3. As it was mentioned earlier, matrix A’ is sparse: each row contains either | or 2
elements. Therefore, it is not necessary to process the entire matrix, but only the
indices of the non-zero elements, which leads to the decrease of the number of
multiplications by a factor of 10: multiplication of matrix A’ by a vector takes
O(n) operations.

The computation time after the implementation of all the proposed modifications
is given in Table 6 for a test problem with 3916 variables. The computations were
done on an [Intel Core 17 CPU 4.00GHz computer with 32 GB of RAM.

Another important feature that can be implemented with the help of the active
set method is a “warm-start” technology (Goswami et al. 2012). When a series
of similar problems is solved, it is reasonable to start not from the point of the
unconstrained minimum but instead from the solution obtained for the previous
problem. Thus the iterations that were already done can be skipped and the speed
of the computations is significantly increased.

Table 7 illustrates how the computation time changes depending on different
starting points.

Q) Springer
1678 M. Stefanova et al.

Table 6 Computation time (in

seconds) of ASM Primal (1)
Nact Original ASM = Modif.1  Modif.land2 Modif.
1,2
and 3
n = 3916,m = 2504
19 181 55 54 48
834 332 210 202 108
1352 = 371 257 246 131
1987 438 283 269 145
Table 7 Computation time (in Primal (1)
seconds) of “warm-start” by
modified ASM given different Number of active constraints in the previous problem
starting points used for “warm-start”
Nact n=0 n= 668 n= 673 n= 690
668 74 — — —
673 74 25 — —
690 76 37 14 -
692 79 47 21 16

Therefore, the Goldfarb-Idnani active set method can be easily adapted to the
peculiarities of the considered problem. Implementation of the modifications
listed above allows to reduce computation time drastically. The technology of
“warm-start” can be efficiently applied when optimizing the assembly.

3.3 Newton projection method

Newton projection method (NPM) is an iterative technique based on gradient descent
for solving constrained optimization problems. Each iteration consists of a step in a
search direction and a projection of the new point to the feasible region. The process
continues until the gradient projection is close enough to zero. An iteration of NPM is
defined as

where d“ is the search direction, a, 1S the step size, P(x) is the projection operator.
Constraints with an identity matrix are considered:

A=I, x-g <0.

Relative and dual problems satisfy this condition as well as primal problem (4). The
projection operator is simple:

Q) Springer
Convex optimization techniques in compliant assembly... 1679

P(x) = min(,, g;).

The method for choosing the direction d with quadratic rate of convergence was
introduced in Bertsekas (1982). It is based on Newton’s method. For the algorithm
specification the set of indices is introduced

— OF (x
ra) ={ielnly=6, Coane <0},

 

Ox

i

where
F(x) = se Kx —f' x.

The set I> (x) includes such indices i that x, would not change if the search was
made along the antigradient. These indices are excluded from the search and the
Newton’s method is used in the subspace defined by the remaining indices to reach
the quadratic rate of convergence. Thus, the search direction d™ can be defined from

k k
where

VF (x) = Kx —f,

(K®)., = K,, if i=j or both i,j ¢ >),
P “¥  ) Q, otherwise.

Initial estimate x can be set equal to g in order to make the set I” (x) not empty
and reduce the dimension of K”. Solving the Eq. (15) is a computationally expen-
sive part of NPM. Thus, choosing an effective method for solving (15) is a key point
in NPM adaptation to assembly problems. Notice that it is possible to avoid storing
of zero rows and columns of matrix K“. Thus, the dimension of the system of equa-
tions is reduced by nv = [IO (x)|. Three approaches based on Cholesky decompo-
sition, conjugate gradient (CG) method and their combination are compared.

First, Cholesky factorization method is considered. Since every Eq. (15) is a
reduction of the full system where some rows and columns are disposed, it is sug-
gested to not recalculate the factorization at each iteration but instead update it
from the previous iteration using relations presented in Stewart (1998) and Osborne
(2010). This method can significantly reduce the time needed for solving the system
of equations (15). The system of equations (15) can also be solved with iterative CG
method (van der Vorst 2003). Another proposed idea is to use a combined approach,
1.e., to use the CG method with low accuracy at the first iterations of NPM, then
increase the accuracy during later iterations, and switch to the Cholesky decomposi-
tion when the CG method starts slowing down.

The comparison of the described approaches is presented in Table 8. The compu-
tations were done on an Intel Core 15 CPU 3.30GHz computer with 16 GB of RAM.

Dimension of the Eq. (15) is n — n ~n—n_,. Thus, the total time for obtaining

act act*

Q) Springer
1680 M. Stefanova et al.

Table 8 Computation time (in seconds) of NPM for different methods for solving the system of equa-
tions (15)

Dual (2) Relative (3)
Nact Cholesky Cholesky CG Comb. Cholesky Cholesky CG Comb.
decomp. update decomp. update

n = 6190, m = 3001

254 15 15 52 16 155 62 57 43
449 28 27 76 20 135 50 39 28
686 34 29 186 27 77 37 17 16
841 42 36 171 36 64 30 14 13
963 60 48 234 37 58 25 12 12
1105 61 50 165 44 47 20 11 9.7
n = 5206, m = 2603

82 1.7 1.7 1.1 0.98 236 25 99 18
550 11 9.9 5.5 5.7 57 20 16 16
868 15 12 7.3 8.0 36 9.2 9.8 7.1
1006 25 19 8.8 15 28 6.2 7.7 5.6
1235 26 21 10 16 7.7 2.6 1.5 1.9

1362 31 21 11 23 3.2 1.8 0.53 1.1

the solution is O((n — Nact)® )- Cholesky decomposition update reduces NPM solu-
tion time, especially for the relative problem. CG method can work either faster or
slower than Cholesky update depending on the matrix. Combined method com-
monly works faster than both of them.

One of the challenges of NPM implementation is the step size selection. There
are several common methods for this problem. The first method is a constant step
method (Goldstein 1964; Levitin and Polyak 1966), which requires knowledge of
the Lipchitz constant and has a poor convergence rate. The second one is Armijo
step size rule (Bertsekas 1982). The third method is the one-dimensional functional
minimization (McCormick and Tapia 1972):

in F(P(x — ad)),
min (Px — ad))

which can be performed by some one-dimensional minimization algorithm. The
golden section search method can be used for the minimization. Practically, the
minimum is usually either 1 or close to 0, so the golden section method is used for
the logarithm of a@ in order to reach values close to zero in less iterations. Another
approach is to use the projected line search (PLS) (Santin et al. 2016), which is actu-
ally a piecewise quadratic minimization. The comparison between the Armijo rule
the golden section method and PLS is presented in Table 9. PLS works faster than
golden section method and much faster than the Armijo step size rule.

The comparison between the primal, relative and dual problems is presented
in Table 10. The number of iterations of NPM for primal and relative problems

decreases linearly with respect to n,,, and has a linear dependence on the problem

Q) Springer
Convex optimization techniques in compliant assembly... 1681

Table 9 Computation time (in seconds) of NPM for different methods of step-size selection

Dual (2) Dual (2)

Nact Armiyo Golden sec. PLS Nact Armiyo Golden sec. PLS
n = 6190, m = 3001 n = 5206, m = 2603

94 119 21 12 82 2 2 1.1
254 152 38 25 550 10 6.7 5.8
449 136 43 27 868 12 9.3 8.3
686 157 56 35 1006 20 16 14
841 244 52 56 1235 17 17 17

1105 247 79 45 1362 33 21 23

Table 10 Computation time (in seconds) of NPM for different problem formulations
Primal (4) Relative (3) Dual (2)

n NPM time number of iter. NPM time number of iter. NPM time number of iter.

act

n = 6190, m = 3001

94 564 36 48 29 10 67
254 510 30 43 22 16 76
449 494 29 23 20 20 69
686 368 24 16 17 27 66
841 315 20 13 16 36 79
963 327 25 12 17 37 64
1105 309 25 9.7 17 44 63
82 317 34 18 34 0.98 19
550 264 19 16 17 5.7 29
868 159 23 7.1 18 8.0 27
1006 ~=—- 108 22 5.6 18 15 33
1235 69 11 1.9 8 16 18
1362 855 7 1.1 7 23 21

Size (Santin and Havlena 2011). Thus, the number of iterations can be estimated
as O(n —n,,;) and the time needed to solve the problem as O((n — Nact) ): Primal
and relative problems are solved faster when the number of active constraints
Nacy 1S large, while dual problems are solved faster when n.,., is small. Moreo-
ver, relative problems are almost always solved much faster than the primal ones
as the size of the relative problem is smaller. Unfortunately, the dual problem
has a worse convergence rate than primal and relative problems due to the differ-
ent physical meaning of the variables and the lack of diagonal dominance of the
inverse stiffness matrix for the dual problem.

Q) Springer
1682 M. Stefanova et al.

In the implemented method the combination of Cholesky factorization,
Cholesky update and CG method is used for solution of (15) and the golden sec-
tion method is used for the step selection. The dual problem should be solved if
the number of active constraints is relatively small (1.e., a small number of fasten-
ers is applied), and the relative problem should be solved otherwise.

3.4 Complementary pivot algorithm

Lemke’s method or complementary pivot algorithm (CPA) is a finite numerical pro-
cedure for solving LCPs. The implementation of the CPA is based on the idea of
pivots. First, an artificial variable is introduced to the system to replace one of the
basic ones. Then, pivots between the variables are performed until the artificial vari-
able is dropped out of the basis. The resulting vector of basic variables is then con-
sidered to be the solution.

Convex quadratic programming problems can be reformulated as LCPs (5). The
Karush—Kuhn—Tucker conditions (KKT) for the primal (1) and dual (2) problems
can be written with an appropriate transformation of variables as follows:

u=-—-f—+Kx+Ad>0, x>0, xu =0,

v=g-A'x>0, A>0, Atv =0. (16)
Conditions (16) define an LCP (g, M) where
K A —f
=|", 4 and a= | 7. (17)

Another LCP can be constructed from the original quadratic problem if a block
pivot is performed on (16) such that

x= K"'f +K'u—K'Ad> 0, x>0, x’u =0,

v=g —A'K'f ~A'’K'u+A'K'AA>0, A>0, A*v=0. (18)

The modified conditions (18) define an equivalent LCP (q, M):
M= K — KA and q= Kf 19
— _A'K7! AK 'A q — g—A'K 'f ° ( )

Both (17) and (19) LCPs incorporate primal (1) and dual (2) problems. The dimen-
sion of the constructed problems N =n+m. The CPA, being a pivoting method,
is highly sensitive to the dimension of the problem. Therefore another way of LCP
construction is suggested in (Yassine 2008). The quadratic problem without positiv-
ity constraints can be transformed into an LCP (g, M) where

M=A'K"'A and q=A'K''f ~g. (20)
This LCP can also be obtained if the dual problem (2) is chosen as a base for KKT

conditions and hence this LCP is further referred to as dual LCP, while the previous

Q) Springer
Convex optimization techniques in compliant assembly... 1683

Table 11 Computation time (in

Primal Dual Relative
seconds) of the CPA

Na LCP (17) LCP (19) LCP(20) LCP(17) LCP (19)

n = 6112,m = 3056

38 =: 14,943 1522 88 4260 405
60 = 19,844 2225 131 5772 601
120 29,943 3540 218 8426 1004
164 37,504 4618 289 10,794 1327
228 50,011 6258 410 15,073 1885

 

Fig.4 Parts of wing-to-fuselage assembly for Airbus A350-900. Outer wing box (left) and central wing
box (right). Photos courtesy of Airbus SAS

LCPs (LCP (17) and LCP (19)) are referred to as primal. The dimension of the dual
LCP (20) N = m. Since the average computation time for the CPA is O(N"), the dual
LCP has an important advantage over the primal ones.

The relative problem (3) can also be reformulated as an LCP. The basic version
of the primal LCP (17) and the modified version (19) for the relative problem have a
dimension N = 2m, and the dual LCP (20) for the relative problem is the same as for
the primal, because the dual quadratic problems for them are identical.

Comparison of computation time of CPA application to primal, dual and relative
problems is presented in Table 11. The computations were done on an Intel Core i5
CPU 3.30GHz computer with 16 GB of RAM. Results provided in the table confirm
that Lemke’s method for the dual LCP (20) works decisively faster than for the rela-
tive or primal problems.

4 Computational results for aircraft assembly

In this section, the computation time of the optimization methods is compared for
a set of typical aircraft assembly problems. The wing-to-fuselage assembly is cho-
sen for this purpose. The details of wing-to-fuselage assembly simulation are given
in Lupuleac et al. (2018, 2019b). The upper and lower outer wing box panels are
joined with the corresponding central wing box (CWB) panels (see Fig. 4). The
CWB is nested within the central fuselage section.

g) Springer
1684 M. Stefanova et al.

Installed
fasteners

   
 

Cruciform
4

Vf

Fixations /

Upper Wing |:
Box panel

 

Central

 

Wing Box
Z Wing Box Wing
Z
a A
Fuselage Lower Wing \
Box panel Support

Buttstrap

Fig.5 Schematic outline of wing-to-fuselage junction

A schematic outline of the wing-to-fuselage assembly is presented in Fig. 5. The
CWB is designed to be the most rigid part of the aircraft, and therefore the elements
of the assembly joined with CWB can be regarded as fixed. The assembly jig sup-
ports the wing at several points. The additional parts (buttstraps) are used to ensure
the tightness of the joint. The assemblies for the upper and lower wing box panels
are performed independently and interinfluence between these processes is minimal.
That is why independent models for the upper and lower wing-to-fuselage assem-
blies are considered (see Fig. 6).

The upper wing-to-fuselage joint consists of just two parts: the cruciform and the
upper wing box panel. The cruciform is already fastened to the CWB, so it can be
assumed to be fixed along the edges as it is shown in Fig. 5. The model for the upper
wing-to-fuselage joint is of simple type and has one junction area between the wing
and the cruciform.

 

Fig.6 Lower and upper assembly wing models

Part of CWB Buttstraps

   
 
 
 

     

be

 
 
 

Triform
| Wing
~*~ Part of CWB

Fig.7 Lower wing-to-fuselage joint

D) Springer
Convex optimization techniques in compliant assembly... 1685

  

Fig.8 Gap in mm before (left) and after (right) installation of the fasteners

Table 12 Test problems description

Model name Number of Joint type Number of Number of Condition number
parts unknowns constraints of stiffness matrix

UJM1 2 Simple 5206 2603 2.47 - 10°

UJM2 2 Simple 11,308 5654 1.77 - 107

LJM 7 Sandwich 6190 3001 1.46 - 108

The lower wing-to-fuselage joint is more complex compared to the upper one and
consists of a lower wing panel, a triform, a part of the CWB, and several buttstraps
(Fig. 7). The triform and the buttstraps are simultaneously fastened to the wing and
to the CWB panel. Hence, the lower wing-to-fuselage assembly model is of sand-
wich-type where the lower wing panel and the part of CWB are located above the
buttstraps and below the triform (Fig. 5). The triform is joined with the vertical
CWB panel, and thus it is fixed along the upper edge. The buttstraps are not fixed on
the assembly jig before fastening.

An example of computational results for an upper wing assembly model is shown
in Fig. 8. The left figure presents the initial gap field between the cruciform and the
upper wing box panel. The right figure shows the residual gap after the installation
of 3 fasteners.

Three test problems used for comparison of algorithms are described in Table 12.
Two models with 5206 and 11308 unknowns correspond to the upper joint model
(UJM). The model with the 6190 unknowns refers to the lower joint model (LJM).
The condition number of stiffness matrix K is larger for LJM than for UJM due to
the features of the assembly jig fixing. The algorithms are implemented in C++
using MSVS 2013 and Visual C++ 12.0 compiler. All computations presented in
this section were done on an Intel Core 15 CPU 3.30GHz computer with 16 GB of
RAM. As seen in Sect. 3, each algorithm used its own stopping criteria. However,
these criteria are chosen so that the difference between the displacements obtained
by the two algorithms does not exceed 10e—7 mm.

Figure 9 presents comparison of the optimization methods for UJM and LJM in
terms of computation speed. The computation time is shown in logarithmic scale as
a function of the number of active constraints. The results are presented only for dual
and relative formulations since for the primal formulation the time is much longer
due to the size of the problem. Each computation was repeated 10 times and the
average value is shown in the Fig. 9. The time deviation varies 4—-15% in average.

D) Springer
1686 M. Stefanova et al.

 

 

 

Lin

  

103 10°
2 = a et E
= 10? 10? Fer
2 =o E oN ee
- Ww ee se ae ee

101 : 10: se— ‘Sam

0 0
10"'0 500 1000 10" 0 500 1000

Number of active constraints

3
10 mans IPM Dual

IPM Rel
wom: ASM Dual
——: ASM Rel

102

Time [sec]

r=mie= NPM Dual
-—-— NPM Rel
CPA Dual

10!

  

109

0 2000 4000
Number of active constraints

Fig.9 Comparison of implemented methods. Solid and dashed lines refer to dual and relative problem
formulations respectively

Let us first consider the results for UJM1 problem. Computation time of NPM
and CPA for the dual problem and ASM for the relative problem increases with the
increase in the number of active constraints at the optimum, 1.e., in the number of
installed fastening elements. Time of NPM for the relative problem and ASM for
the dual one has the opposite dependency. IPM computation time does not depend
strongly on the number of active constraints. Note that this behaviour agrees with
the theoretical complexity presented in Table 3. These basic time trends are also pre-
sent in the results of UJM2 and LJM problems.

The UJM1 and UJM2 differ mainly in the number of variables n. Thus, its influ-
ence is clearly observed in the results. With an increase in the number of variables,
the time increases significantly for the most of the methods with the exception of
IPM. NPM applied to the dual problem is generaly the fastest in solving the contact
problem for upper wing models. However, NPM for the relative problem is less time
consuming than for the dual one when the number of active constraints is large.

The UJM1 and LJM have similar number of unknowns, but the condition number
for the lower wing model is larger. Comparing these two models, ASM is revealed
to be the least affected by the condition number of the stiffness matrix. ASM applied
to the relative problem is usually the fastest for LJM with the exception of problems
with a large number of active constraints, where NPM for the relative problem is the
leader.

Finally, let us consider the computation time distribution for variation simula-
tion analysis of an Airbus A350-900 wing-to-fuselage assembly. The aim of the

D) Springer
Convex optimization techniques in compliant assembly... 1687

Fig. 10 Distribution of number
of active constraints for the
solution of contact problem with 20

 

 

   

 

 

different measured initial gaps a.
and 50% of installed fasteners oo
O
o
2 10
3
Z
0
1000 1200 1400 1600
Number of active constraints
200 200
Dual problem Relative problem

a» 150 a» 150
S S
oD oD
S S

8 100 8 100
= =
3 3

Z 50 Z 50

0 0

0 50 100 150 200 0 50 100 150 200
Time [sec] Time [sec]

Fig.11 Time distribution for the solution of contact problem with different measured initial gaps and
50% of installed fasteners

analysis is to verify that a given configuration of fastening elements provides a
sufficient fastening level to close the gap between the assembled parts (Lupuleac
et al. 2019b). Such an analysis requires to solve the contact problems for a set of
measured initial gaps. In total about 200 sets of measurements of aircraft pro-
duced in 2013-2016 were used for the analysis. The distribution of the number
of active constraints for the measured initial gaps is shown in Fig. 10. UJM1 with
50% of installed fasteners was used for variation simulation analysis, i.e the con-
tact problem was solved with the same stiffness matrix, matrix of constraints and
vector of forces for all of the measured initial gaps.

Figure 11 presents computation time distribution for different solvers. The
results presented in Fig. 11 agree with those presented in Fig. 9: the order of the
bars in the histograms follows that of the curves for the corresponding number of
active constraints. Since the computation time of the CPA for relative problems is
considerably greater than for dual ones (see Sect. 3.4), it was only applied to the
dual formulation of the test problems.

Note that some problems arising in fastener pattern optimization can require
massive computations of up to 10° runs and thus task parallelization is needed

Q) Springer
1688 M. Stefanova et al.

(Pogarskaia et al. 2018). Therefore, to reduce the total computation time of
assembly simulation, not only the average computation time for one run has to
be reduced, but also the maximal computation time. According to the obtained
results (see Fig. 11), for both dual and relative problem, NPM is revealed to be
the leader both in terms of average and maximal computation time. The CPA
works considerably slower than the other implemented methods for the test prob-
lems. Moreover, it has the largest deviation between maximal and average time,
which creates difficulties for task parallelization. Note that the results in Fig. 11
only represent the variation simulation analysis of one fastener pattern. Different
methods can yield the best results for different patterns.

5 Conclusion

The paper presents and discusses computational aspects related to the solution of
a certain class of quadratic programming problems related to variation simulation
analysis.

The contact problem arising in assembly simulation is reformulated in dual and
relative form. Data preprocessing (e.g., matrix transformations) is only performed
once for the assembly model. Therefore the time for each of the multiple problem
solving as well as time for the complete assembly analysis is reduced, since the vari-
ation simulation analysis requires solving of problems with similar data.

The presented numerical experiments demonstrate the following features of the
methods. The computation time of the interior point method is not affected by the
number of active constraints at the optimum. Thus, this method is suggested for such
problems as optimization of fastening pattern for simple joints where the number of
active constraints may vary considerably. The Goldfarb-Idnani active set method is
revealed to be the best for middle-scaled ill-conditioned problems such as verification
analysis of complex joints. Newton projection method is suitable for problems of vari-
ous types, to the fullest extent for the large-scale ones and for problems with big num-
ber of active constraints. The Complementarity pivot algorithm should be preferred
for problems with small number of active constraints. For the example of variation
simulation analysis of an assembly simulation problem, Newton projection method
was revealed to be the leader in terms of average and maximal computation time.

The adaptation of the discussed numerical methods combined with an appropri-
ate modification of the contact problem leads to a considerable reduction of compu-
tation time for the described problems.

Acknowledgements Open Access funding provided by Projekt DEAL. This work is supported by the
Russian Science Foundation under grant 20-19-00144.

Open Access This article is licensed under a Creative Commons Attribution 4.0 International License,
which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as
you give appropriate credit to the original author(s) and the source, provide a link to the Creative Com-
mons licence, and indicate if changes were made. The images or other third party material in this article
are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the
material. If material is not included in the article’s Creative Commons licence and your intended use is
not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission

Q) Springer
Convex optimization techniques in compliant assembly... 1689

directly from the copyright holder. To view a copy of this licence, visit http://creativecommons.org/licen
ses/by/4.0/.

References

Acary V, Brogliato B (2008) Numerical methods for nonsmooth dynamical systems: applications in
mechanics and electronics, vol 35. Springer, Berlin

Acary V, Pérignon F (2007) An introduction to Siconos. Technical Report RT-0340, INRIA

Bertsekas D (1976) On the Goldstein—Levitin—Polyak gradient projection method. IEEE Trans Autom
Control 21(2):174-184

Bertsekas D (1982) Projected Newton methods for optimization problems with simple constraints. SIAM
J Control Optim 20(2):221-—246

Boland NL (1996) A dual-active-set algorithm for positive semi-definite quadratic programming. Math
Program 78(1):1—27

Burton D, Toint PL (1992) On an instance of the inverse shortest paths problem. Math Program
53(1-3):45-61

Byrd RH, Hribar ME, Nocedal J (1999) An interior point algorithm for large-scale nonlinear program-
ming. SIAM J Optim 9(4):877—900

Cottle RW, Pang JS, Stone RE (1992) The linear complementarity problem. Academic Press, San Diego

Dahlstrom S, Lindkvist L (2007) Variation simulation of sheet metal assemblies using the method of
influence coefficients with contact modeling. J Manuf Sci Eng 129(3):615-622

D’Apuzzo M, De Simone V, di Serafino D (2010) Starting-point strategies for an infeasible potential
reduction method. Optim Lett 4(1):131-146

Ferris MC, Munson TS (2018) GAMS documentation 25.1: PATH 4.7

Galin LA (1961) Contact problems in the theory of elasticity. North Carolina State College, Raleigh

Gaspero LD, Tollo GD, Roli A, Schaerf A (2011) Hybrid metaheuristics for constrained portfolio selec-
tion problems. Quant Financ 11(10):1473-1487

Goldfarb D, Idnani A (1983) A numerically stable dual method for solving strictly convex quadratic pro-
grams. Math Program 27(1):1—33

Goldstein AA (1964) Convex programming in Hilbert space. Bull Am Math Soc 70(5):709-7 10

Gondzio J, Grothey A (2006) Direct solution of linear systems of size 109 arising in optimization with
interior point methods. In: Wyrzykowski R, Dongarra J, Meyer N, WaSniewski J (eds) Parallel pro-
cessing and applied mathematics. Springer, Berlin, pp 513-525

Gondzio J, Terlaky T (1995) A computational view of interior point methods. In: Beasley J (ed) Advances
in linear and integer programming. Oxford University Press, Oxford, pp 103-144

Goswami N, Mondal SK, Paruya S (2012) A comparative study of dual active-set and primal-dual inte-
rior-point method. IFAC Proc Vol 45(15):620—625

Guyan RJ (1965) Reduction of stiffness and mass matrix. J Math Ind 3:380

Kinderlehrer D, Stampacchia G (1980) An introduction to variational inequalities and their applications,
vol 31. SIAM, Philadelphia

Lemke CE (1968) On complementary pivot theory. Math Decis Sci 1:95—114

Levitin ES, Polyak BT (1966) Constrained minimization problems. USSR Comput Math Math Phys 6:1-
50 (Eng. transl. of paper in Zh. Vychisl. Mat. i Mat. Fiz (1965) 6:787-823)

Lin CJ, Saigal R (2000) An incomplete Cholesky factorization for dense symmetric positive definite
matrices. BIT Numer Math 40(3):536-558

Lindau B, Lorin S, Lindkvist L, Séderberg R (2016) Efficient contact modeling in nonrigid variation
simulation. J Comput Inf Sci Eng 16(1):011002

Lions JL, Stampacchia G (1967) Variational inequalities. Commun Pure Appl Math 20:493-519

Liu SC, Hu SJ (1997) Variation simulation for deformable sheet metal assemblies using finite element
methods. J Manuf Sci Eng 119(3):368-374

Lupuleac S, Kovtun M, Rodionova O, Marguet B (2010) Assembly simulation of riveting process. SAE
Int J Aerosp 2(2009-01-3215):193-198

Lupuleac S, Petukhova M, Shinder Y, Bretagnol B (2011) Methodology for solving contact problem dur-
ing riveting process. SAE Int J Aerosp 4(201 1-01—2582):952—957

Q) Springer
1690 M. Stefanova et al.

Lupuleac S, Shinder Y, Petukhova M, Yakunin S, Smirnov A, Bondarenko D (2013) Development of
numerical methods for simulation of airframe assembly process. SAE Int J Aerosp 6(1):101-—105.
https://doi.org/10.427 1/2013-01-2093

Lupuleac S, Zaitseva N, Stefanova M, Berezin S, Shinder J, Petukhova M, Bonhomme E (2018) Simula-
tion and optimization of airframe assembly process. In: ASME 2018 international mechanical engi-
neering congress and exposition. American Society of Mechanical Engineers, vO0O2T02A109

Lupuleac S, Smirnov A, Churilova M, Shinder J, Zaitseva N, Bonhomme E (2019a) Simulation of body
force impact on the assembly process of aircraft parts. In: ASME 2019 international mechanical
engineering congress and exposition. American Society of Mechanical Engineers

Lupuleac S, Zaitseva N, Stefanova M, Berezin S, Shinder J, Petukhova M, Bonhomme E (2019b) Simula-
tion of the wing-to-fuselage assembly process. J Manuf Sci Eng 10(1115/1):4043365

Marron J, Turlach B, Wand M (1997) Local polynomial smoothing under qualitative constraints. Comput
Sci Stat 28:647-652

McCormick G, Tapia R (1972) The gradient projection method under mild differentiability conditions.
SIAM J Control 10(1):93—98

Mehrotra S (1992) On the implementation of a primal-dual interior point method. SIAM J Optim
2(4):575-601

Osborne M (2010) Bayesian Gaussian processes for sequential prediction, optimisation and quadrature.
PhD thesis, University of Oxford

Petukhova MV, Lupuleac SV, Shinder YK, Smirnov AB, Yakunin SA, Bretagnol B (2014) Numerical
approach for airframe assembly simulation. J Math Ind 4:8

Pogarskaia T, Churilova M, Petukhova M, Petukhov E (2018) Simulation and optimization of aircraft
assembly process using supercomputer technologies. In: RuSCDays 2018 communications in com-
puter and information science, vol 965. Springer, Berlin

Powell M (1985) On the quadratic programming algorithm of Goldfarb and Idnani. Mathematical pro-
gramming essays in honor of George B. Dantzig part II. Springer, pp 46-61

Rogue Wave Software (2016) IMSL C Library 8.6.0 User Guide, volume 1—Math Library

Santin O, Havlena V (2011) Combined gradient and Newton projection quadratic programming solver for
MPC. IFAC Proc Vol 44(1):5567—5572

Santin O, JaroSova M, Havlena V, Dostél Z (2016) Proportioning with second-order information for
model predictive control. Optim Methods Softw 32(3):436—-454. https://doi.org/10.1080/10556
788.2016.1213840

Scilab (2018) Scilab 6.0.1 help, optimization and simulation

Stefanova M, Yakunin S, Petukhova M, Lupuleac S, Kokkolaras M (2018) An interior-point method-
based solver for simulation of aircraft parts riveting. Eng Optim 50(5):78 1-796

Stewart GW (1998) Matrix algorithms: basic decompositions, vol 1. Society for Industrial and Applied
Mathematics, Philadelphia

Tu YO, Gazis D (1964) Gazis the contact problem of a plate pressed between two spheres. J Math Ind
31:659-666

Turner MJ, Topp LJ, Martin HC, Clough RW (1956) Stiffness and deflection analysis of complex struc-
tures. J Math Ind 23:805-823

van der Vorst HA (2003) Iterative Krylov methods for large linear systems. Cambridge University Press,
Cambridge

Wriggers P (2006) Computational contact mechanics, 2nd edn. Springer, Berlin

Wright M (2005) The interior-point revolution in optimization: history, recent developments, and lasting
consequences. Bull Am Math Soc 42(1):39-56

Yang D, Qu W, Ke Y (2016) Evaluation of residual clearance after pre-joining and pre-joining scheme
optimization in aircraft panel assembly. Assem Autom 36(4):376—-387

Yassine A (2008) Comparative study between Lemke’s method and the interior point method for the
monotone linear complementary problem. Studia Univ Babes-Bolyai Math 53:119-132

Publisher's Note Springer Nature remains neutral with regard to jurisdictional claims in published
maps and institutional affiliations.

Q) Springer

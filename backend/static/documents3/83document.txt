Distributed Computing (2020) 33:471-484
https://doi.org/10.1007/s00446-020-00369-0

®

Check for
updates

A tight lower bound for semi-synchronous collaborative grid

exploration

Sebastian Brandt! - Jara Uitto* - Roger Wattenhofer'

Received: 4 July 2019 / Accepted: 7 January 2020 / Published online: 3 February 2020

© The Author(s) 2020

Abstract

Recently, there has been a growing interest in grid exploration by agents with limited capabilities. We show that the grid
cannot be explored by three semi-synchronous finite automata, answering an open question by Emek et al. (Theor Comput
Sci 608:255—267, 2015) in the negative. In the setting we consider, time is divided into discrete steps, where in each step, an
adversarially selected subset of the agents executes one look—compute—move cycle. The agents operate according to a shared
finite automaton, where every agent is allowed to have a distinct initial state. The only means of communication is to sense
the states of the agents sharing the same grid cell. The agents are equipped with a global compass and whenever an agent
moves, the destination cell of the movement is chosen by the agent’s automaton from the set of neighboring grid cells. In
contrast to the four agent protocol by Emek et al., we show that three agents do not suffice for grid exploration.

Keywords Finite automata - Graph exploration - Mobile robots

1 Introduction

Consider the problem of exploring an infinite grid with a set
of mobile robots, ants, or agents. In practical applications, itis
often desirable to make use of inexpensive and simple devices
and therefore, a finite automaton is an attractive choice for
modeling these agents. Furthermore, neither reliable commu-
nication nor synchronous time is always available and thus,
distributed and non-synchronous solutions are needed. Also
exploration models inspired by biology require these fea-
tures; for example models for ant foraging assume limited
capabilities and distributed searching. In both settings men-
tioned above, it is often reasonable to assume simple means
of communication of nearby agents.

Most of the research was done affiliated with ETH Ziirich and
University of Freiburg and supported by ERC Grant No. 336495
(ACDC).

Cb Jara Uitto
jara.uitto @aalto.fi

Sebastian Brandt
brandts @ ethz.ch

Roger Wattenhofer
wattenhofer @ethz.ch

! ETH Ziirich, Ziirich, Switzerland

2 Aalto University, Konemiehentie 2, 02150 Espoo, Finland

Semi-Synchrony Recently, there has been a growing interest
in studying constant memory agents performing exploration
on an infinite grid. An infinite grid is a natural discrete version
of a plane which disallows the bounded memory agents to
make any use of the boundaries of the grid. Emek et al. [16]
introduced a model where the agents are able to communicate
by sensing each other’s states and showed a tight upper bound
for the time needed for k agents to find a treasure! at distance
D. As the first step into the model, let us introduce the way
that the semi-synchrony is defined. The time is divided into
discrete time steps, and in each time step, an adversarially
chosen subset of the agents performs a look—compute—move
cycle in parallel. In each cycle, the chosen agents first sense
the states of all the other agents in the same cell and then,
determined by their transition function, either stay still or
move to an adjacent grid cell. We point out that in every
step, every agent performs the “look” action before any agent
executes their “compute” step, 1.e., agents sharing a cell and
activated in the same time step see each other’s states before
any of them executes a state transition. This definition allows
an arbitrary discrepancy in the number of steps the agents
perform but ensures that, whenever two agents meet, at least

' In the deterministic case, exploring the grid and finding a treasure are
equivalent. In the randomized case, considering a treasure is more con-
venient as the exploration is equivalent to hitting every cell in expected
finite time.

Q) Springer
472

one of them will be able to sense the presence of the other
agent.

All input parameters, such as D and k are unknown to

the agents and they are all initially located in the origin of
the grid. Motivated by the fact that ants are able to perform
very precise path integration, it is assumed that the agents
are endowed with a global compass.
Previous Results Following up on the above model, Emek
et al. [15] studied the minimum number of agents needed to
explore the infinite grid, where exploring refers to reaching
any fixed cell within (expected) finite time. They showed that
three randomized and four deterministic semi-synchronous
agents are enough for the exploration task. We want to point
out that the asynchronous environment in their paper is
referred to as semi-synchronous in older literature [24,25].
The paper left two open questions:

Can two agents controlled by a randomized FA solve
the synchronous or asynchronous version of the ANTS?
problem?

Is there an effective FA-protocol for async-ANTS for
three agents when no random bits are available?

Very recently, Cohen et al. [10] solved the first question
by showing that two randomized agents do not suffice. The
main result of this paper is a negative answer to the second
question:

Theorem 1 Three semi-synchronous agents controlled by a
finite automaton are not sufficient to explore the infinite grid.

Our result is obtained by solving two technical challenges.
First, we carefully design an adversarial schedule for the
agents that, under the assumption that the agents actually
explore the entire grid, forces them to obey a movement pat-
tern with the following property: There is a fixed width w
and fixed slope s such that at any point in time, all agents
are contained in a band of width w and slope s. Second,
we formally show that the agents cannot encode a super-
constant amount of information in their relative positions. In
other words, while the relative distance can be unbounded
and represent an unbounded amount of information, we can
bound the amount of information the agents can infer from
their relative positions.

2 Related work
Graph exploration is a widely studied problem in the com-
puter science literature. In the typical setting one or more

agents are placed on some node of a graph and the goal is to

* The ANTS problem in their context is the same as our grid exploration
problem.

Q) Springer

S. Brandt et al.

visit every node and/or edge of the graph by moving along
the edges. There is a wide selection of variants of graph
exploration and one of the standard ways to classify these
variants is to divide them into directed and undirected vari-
ants [1,11]. In the directed model, the edges of the graph only
allow traversing into one direction, whereas in the undirected
model, traversing both ways is allowed. Our work assumes
the undirected graph exploration model.

Other typical parameters of the problem are the condi-
tions of a successful exploration and symmetry breaking
mechanisms. Some related works demand that the agents
are required to halt after a successful exploration [12] or
that the agents must return to their starting point after the
exploration [3]. From the perspective of symmetry breaking,
one characterization is to break the problem into the case of
equipping nodes with unique identifiers [14,22] and into the
case where nodes are anonymous [5,8,23]. Since the memory
of our agents is restricted to a constant amount of bits with
respect to the size of the graph, the unique identifiers are not
helpful.

The agents typically operate in look—compute—move cycles,
where they first gather the local information, then per-
form local computations, and finally, decide to which node
they move. This execution model can be divided into syn-
chronous [25], semi-synchronous [24,25] and asynchronous
variants [18,26], referred to as FSYVNC, SSYNC, and
ASYNC. In the FSYNC model, all agents execute their
cycles simultaneously in discrete rounds. In the SSYVNC
model only a subset (not necessarily proper) of the agents
is activated in every round and in the ASYNC model, the
cycles are not assumed to be atomic. To avoid confusion, we
refer to the non-synchronous rounds as time steps. In this
paper, we consider the semi-synchronous model. Note that
since the ASYNC model is weaker than the SSYNC model,
we directly obtain our lower bound result for the ASYNC
model as well.

The standard efficiency measure of a graph exploration
algorithm executed in the FSYNC model is the number of
synchronous rounds it takes until the graph is explored [22].
In the non-synchronous models, this measure is typically
generalized to the maximum delay between activation times
of any agent [9]. A widely-studied classic is the cow-path
problem, where the goal of the cow is to find food or a trea-
sure on a line as fast as possible. There is an algorithm with
a constant competitive ratio for the case of a line and in the
case of a grid, a simple spiral search is optimal and the prob-
lem has been generalized to the case of many cows [4,21].
Some more recent work studied the time complexity of n
distributed agents searching for a treasure at distance D on
a grid and a @(D/n7 + D) bound was shown in the case of
Turing machines without communication and in the case of
communicating finite automata [16,17].
A tight lower bound for semi-synchronous collaborative grid exploration

Our work does not focus on the time complexity of the
problem, but rather on the computability, i.e, what is the min-
imum number of agents that are required to find the treasure.
The canonical algorithm in the case of little memory is the
random walk, where the classic result states that a random
walk explores an n-node graph in polynomial time [2]. In
the case of infinite grids, it was shown in a recent paper that,
even with a globally consistent orientation, two randomized
agents cannot locate the treasure in finite expected time [10].
By combining this result with previous work [7,15], it follows
that this lower bound is tight. In the deterministic case, our
lower bound of three deterministic semi-synchronous agents
closes the remaining gap in the results of [15].

Another typical measure for efficiency is the number of
bits of memory needed per agent [12,19]. For example, it
was shown by Fraigniaud et al., that O(D log A) bits are
needed for a single agent to locate the treasure, where D
and A denote the diameter and the maximum degree of the
graph, respectively. The memory of our agents is bounded by
a universal constant, independent of any graph parameters.

Work that falls close to our work is the study of graph
exploration in labyrinths, 1.e., graphs that can be seen as 2-
dimensional grids, where some subset of the nodes cannot
be entered by the agents. The classic results state that all
co-finite (finite amount of cells not blocked) labyrinths can
be explored by two finite automata and an automaton with
two pebbles [6], and that finite labyrinths (finite amount of
cells are blocked) can be explored using one agent with four
pebbles [7], where a pebble is a movable marker. Further-
more, it is known since long that there are finite and co-finite
labyrinths where one pebble is not enough [20] and that no
finite set of finite automata can explore all planar graphs [23].
More recently, it was shown that © (loglogn) pebbles for
an agent with © (loglogn) memory is the right answer for
general graphs [13]. Notice that since we do not assume syn-
chronous communication between agents and a pebble can
always be simulated by a finite automaton, our result also
yields the same bound for the pebble model.

3 Preliminaries

The model

The model we use 1s the same as in [15]. We consider a group
of n agents whose task is to explore every cell of the infinite
2-dimensional grid where a cell is considered as explored
when it has been visited by at least one of the agents. We
identify each cell of the grid with a pair of integers, i.e., the
grid can be considered as Z”, with two cells being neighbors
if and only if they differ in one coordinate by exactly 0 and
in the other coordinate by exactly 1.

473

In the beginning, all agents are placed in the same cell,
called the origin. W.1.0.g., we will assume that the origin has
the coordinates (0, 0). For the agents, all cells, including the
origin, are indistinguishable; in particular, they do not have
access to the coordinates of the cells.

Each agent is endowed with a compass, 1.e., each agent
is able to distinguish between the four (globally consistent)
cardinal directions in any cell and all agents have the same
notion of those directions. The behavior of each agent is
governed by a deterministic finite automaton. While we allow
the agents to use different finite automata, we will assume that
the agents use the same finite automaton but have different
initial states. Since in all cases we consider, n is a constant,
the two formulations are equivalent.

The only way in which communication takes place is the
following: Each agent senses for any state g of the finite
automaton whether there is at least one other agent in the
same cell in state g. In each step of the execution, an agent
moves to an adjacent cell or stays in the current cell, solely
based on its current state in the finite automaton and the subset
of states g for which another agent in state g is present in the
current cell.

Given the above, we are set to describe our finite automa-
ton more formally. Let Q denote the set of states, with each
agent having its own initial state in Q. The set of input sym-
bols is 22, the set of all subsets of Q, reflecting the fact
that for each state from Q an agent in this state might be
present or not in the considered cell. The transition func-
tiond : Ox 22 > OQ x {0,1,2,3, 4} provides an agent
in state g € Q (sensing a subset Q’ C Q of states present
in the same cell) with a new state g’ € Q and a movement,
where 1, 2, 3, 4 stand for the four cardinal directions while
0 indicates that the agent stays in the current cell.

The SSYNC [24,25] environment in which the agents
perform their exploration is semi-synchronous. More specif-
ically, we assume that the order of the steps of the agents
is determined by an adversarial scheduler that knows the
finite automaton governing the agents’ behavior. Each step
of an agent is a complete /ook—compute—move cycle, where
first an agent senses for which states agents are present in the
current cell, then it applies the transition function with the
sensed states and its own current state as input, and finally it
moves as indicated by the result. Cycles of different agents
may occur at the same time, in which case each of the agents
completes the sensing before any of the agents starts to move.
Cycles that do not occur at the same time have no overlap,
1.e., the movement performed in an earlier cycle is completed
before the sensing in a later cycle starts. Hence, we may con-
sider the order of the individual components of the execution
as given by a mapping of the agents’ steps to points in time.

We call such a mapping a schedule. Since the look—
compute—move cycles of the agents are atomic in nature, we
can assume w.1.o.g. that the static configurations of the agents

Q) Springer
474

on the grid (including the information about the states they
are currently in) occur at integer points in time t = 0, 1,...,
and that the steps of the agents determining the transition
from one configuration to anew one take place between these
points in time. If an agent’s action is scheduled between time
t and t + 1, we say, for the sake of simplicity, that the action
takes place at time rf. In order to prevent the adversary from
delaying a single agent indefinitely, we adopt the common
requirement that each agent is scheduled infinitely often. For
our lower bound we will only use adversarial schedules where
no two agents are scheduled at the same time.

Definitions and notation

For the notion of distance between two cells we will use the
Manhattan distance. Let c = (x, y), c’ = (x’, y’) be two
cells of the infinite grid. Then, the distance between c and c’
is defined as Dist(c, c’) = |x — x’|+]|y — y’|. Moreover, we
call the first coordinate of a cell the x-coordinate and the sec-
ond coordinate the y-coordinate. We denote the cell an agent
a occupies at time t by c;(a) = (x(a), y;(a@)). Similarly, we
denote the state of the finite automaton in which agent a is at
time ¢t by g;(a). Ifa = a; for some | <i < 3, then we also
write cl, x!, yl, qi instead of c;(a;), x¢(aj), Yr(aj), Gr (ai),
respectively. Moreover, we denote the number of states of the
finite automaton governing the behavior of the three agents
by N.

In our lower bound proof, we show for each finite automa-
ton that three agents governed by this automaton are not
sufficient to explore the grid (or, more precisely, that there is
an adversarial schedule for this automaton under which the
agents do not explore every cell of the grid). In this context,
we consider the number WN as a constant, which also implies
that the result of applying any fixed function to N is a con-
stant as well. For the proof of our lower bound we require
another intuitive definition. Let £ be an infinite line in the
Euclidean plane and d some positive real number. Let B be
the set of all points in the plane with integer coordinates and
Euclidean distance at most d to €. Let B’ be the set of all
grid cells that have the same coordinates as some point in B.
Then we call B’ a band.

A single agent

Consider a single agent a moving on the grid. Since the
number of states of its finite automaton is finite, a must
repeat a state at some point, i.e., there must be points in
time t,t’ such that g;(a) = q (a) and gy (a) # g;(a) for
allt < t” < t’. As shown in [15], agent a will then, start-
ing at time t’, repeat the exact behavior it showed starting at
time ¢ regarding both movement on the grid and updating of
its state. We call the 2-dimensional vector c,;/(a) — c;(a) =
(x(a) — x¢(a), yy/(a) — y;(a)) the travel vector of agent a

Q) Springer

S. Brandt et al.

(from time f to time t’). Moreover, we call the time difference
t’ — t the travel period.

Note that travel vector and travel period do not depend on
the choice of t and t’ (provided t and t’ satisfy the properties
mentioned above). In the case of multiple agents, we use the
same definitions for any time segment where only a single
agent is scheduled and does not encounter another agent. In
particular, we can only speak of a travel vector and a travel
period when there are two points in time (in the considered
time segment) where the scheduled agent repeats a state and
at both times as well as in the time between, the agent is alone
in its cell.

4 Techniques

In order to show our main result, we use a (large) proof by
contradiction. In the following we give a (very informal and
possibly slightly inaccurate) high-level overview of how it
proceeds. Our assumption, that holds throughout the remain-
der of the paper, is that three agents actually suffice to explore
the grid. From this assumption, we derive a contradiction as
follows:

First, we fix an adversarial schedule for the three agents
that has certain advantageous properties. (We will show that
itis already possible to derive a contradiction for this specific
schedule.) Then, using the finiteness of the number of config-
urations of agents in any bounded area, we show that for each
distance D there is a point in time such that from this time
onwards, there are always at least two agents that have dis-
tance at least D. However, since we can prove that any two
agents must meet infinitely often, there must be infinitely
many travels between the two far-away agents (which are
not always the same agents). We show that the vector along
which such a travel takes place must have a fixed slope that is
the same for all such travel vectors (from a sufficiently large
point in time on). Otherwise, there would exist two subse-
quent travels forth and back of different slope, which would
imply that the traveling agent on its way back would miss the
agent it is supposed to meet (which is the agent from whose
position the first of the two travels started, roughly speaking).
This also holds if the traveling agent explores some area to
the left and right of its travel direction (during its travel),
since the distance D between the two endpoints can be made
arbitrarily large.

The crucial part of the proof is to show that the state of the
traveling agent at the end of its travel does not depend on the
exact vector between the start and the endpoint of its travel,
but only on this vector “modulo” some other vector v that
is obtained by combining all of the finitely many possible
traveling vectors of the aforementioned fixed slope. Prov-
ing this statement enables us to show that, at the start of a
travel, the information (1) about the states and relative loca-
A tight lower bound for semi-synchronous collaborative grid exploration

tions “modulo v” of the agents, and (2) about which agent
is scheduled next and which is the traveling agent, are suf-
ficient to determine the same information at the start of the
next travel. Since there are only finitely many of these infor-
mation tuples (exactly because they contain only the modulo
version of the relative locations), at some point a tuple has
to occur again. Hence, in a sense, the whole configuration
consisting of the three agents repeats its previous movement
from this point on, at least if one ignores any movement in the
direction of the fixed slope. Thus, in each repetition between
two occurrences of the information tuple, the whole config-
uration moves by some fixed (and always the same) vector,
which implies that the agents explore “at most half” of the
grid.

5 The schedule

From this section on, we assume that three semi-synchronous
agents whose behavior is governed by a finite automaton suf-
fice to explore the grid. Let a), a2 and a3 be these agents. We
start our proof by contradiction by specifying a schedule that
we assume to be the adversarial schedule for the remainder
of this paper:

We first schedule agent a, for some number of time steps,
then agent a2, then a3, and then we iterate, again starting with
a,. The number of steps an agent is scheduled can vary. In
other words, we can describe our schedule as a sequence

S= (Si. Si, S}, 5}, 53,83, 83, .)

of subschedules where in each subschedule Si only agent a;

is scheduled. The number of time steps in a subschedule Si
is determined as follows:

1. If there is a (finite) number u > O of time steps after
which agent a; is in a cell occupied by another agent,
then the subschedule Si ends after Umin time steps where
Umin denotes the smallest such uw.

2. If Case | does not apply, but there is a (finite) number
u > O of time steps after which a; is in the same state
in the same cell as it was at some earlier point in time
during Si, then do the following:

Fix a total order on the state space of a;’s finite automaton.
(This total order can be chosen arbitrarily, but in each
application of Case 2 for agent a; the same order has to
be used.) Let g be the smallest state according to this order
which a; assumes at least twice in the same cell (if we
scheduled q; indefinitely). Then Si ends after the smallest
positive number of steps after which q; is in state g and in
a cell where a; would assume g at least twice. Note that
the property that a; would assume g twice implies that it

475

would repeat the exact behavior between the first and the
second assumption of g infinitely often afterwards, thus
iterating through the exact same movement on and on.
3. Ifnone of the two above cases occurs, 1.e., a4; would move
on indefinitely without meeting any other agent or being
in the same state in the same cell as before, then we
schedule as follows: Let (x, y) be the travel vector of a;’s
movement, and p the travel period. Then the subschedule
si ends at the first time r (strictly after the start of A)
for which the following property is satisfied:
At time ¢, agent qa; is in a state that it already assumed
before in subschedule Si (1.e., @j 1S guaranteed to repeat
its behavior from now on), and for each cell (x;, y;)
occupied by an agent a,;, r # i, we have that 1) x! —x; >
pitx > 0, and x! —xi <—pifx <0, and 2) y! — y! > p
if y > 0, and yi! — yl < —p if y < 0. The definition
of the travel vector ensures that there is such a (finite)
point in time t. Note that Case 3 can only occur if x ~ 0
or y £ 0.2 Moreover, if this case actually occurs, then
the complete subsequent schedule is adapted according
to the following special rule (overriding all of the above):
After time f, the two agents a,,r #7, are scheduled for
one time step each (in arbitrary order), then agent a; 1s
scheduled for p time steps, 1.e., exactly one travel period,
and then we iterate this new scheduling.

Observe that according to this schedule, the number of
time steps a scheduled agent can stay put in a cell during one
of its subschedules is upper bounded by N. Also note that in
each of the three cases, the number of steps in the subschedule
is positive (and finite). For an illustration of Cases 2 and 3,
see Fig. 1. We now collect a few lemmas that highlight certain
properties of the three cases.

Lemma 1 Case 3 cannot occur.

Proof Recall that we assume (globally) that the three agents
explore the entire infinite grid. Assume that Case 3 occurs
and let a; denote the agent that would move on indefinitely
without meeting another agent. Then, at the beginning of the
first iteration according to the special rule, the distance of
agent a; to any of the other agents is more than p in at least
one (of x- and y-) direction and a; moves away from the
agents according to the travel vector. After each of the other
agents makes a step, this distance is still at least p. Hence,
agent a; cannot encounter one of the other agents during its
next p steps, since in total it moves away from the other
agents, according to the specification of Case 3.

>If x = y = 0, agent a stays within a constant distance from the
cell where the subschedule started. Hence, if Case | does not occur,
there must be a state/cell combination that is assumed twice (due to the
number of cells within this constant distance being finite), implying that
Case 2 must occur.

Q) Springer
476

 

Fig.1 In the upper figure, Case 2 of our schedule is shown. Note that
the agent already stops when it visits the cell on the right (in state qg)
for the first time (unless this happens after 0 time steps). As the agent
chooses the repeated state/cell pair in which it ends its subschedule
according to some arbitrary ordering of the repeated pairs, it will not
necessarily stop at the start of the loop. In the lower figure, we see Case 3
of our schedule. One agent would move arbitrarily far away if scheduled
sufficiently long. By letting this agent move away far enough and then
scheduling it sufficiently often for a long enough period of time, we
make sure that it will not interact anymore with any of the other two
agents

The direction of the travel vector also ensures that the
distance to the other agents is again increased to more than
p (in at least one direction). Thus, the same arguments hold
for the next iteration, and we obtain by induction that agent
a; will never encounter another agent after the occurrence of
Case 3. It follows that, if three agents suffice to explore the
grid, then also a team of two agents and a separate single agent
can explore the grid without any communication between the
team and the single agent. From [15], we know that this is
not possible since a team of two agents (hence, also a single
agent) can only explore a band of constant width. Oo

Following Lemma 1, we will assume in the following
that Case 3 does not occur, i.e., each agent’s subschedule
ends because it encounters another agent or because it enters
a pair state/cell that it would assume more than once (if
scheduled indefinitely). This allows us to group the possi-
ble subschedules of an agent into two categories: We say that
a subschedule Si is of type 1 if Si ends because of the con-

dition given in Case 1, and of type 2 if si ends because of
the condition given in Case 2.

Lemma 2 Any subschedule of type 2 consists of at most N
time steps.

Proof Assume for a contradiction that there is a subschedule
Si of type 2 that consists of at least N + 1 time steps and
starts at some time ft. Then, by the pigeonhole principle, there
must be two points in time t < t’ < t/” < t+N-+1 such that
qi, = Gin: Moreover, it must also hold that ci, = cl, since
otherwise aj would move according to some non-zero travel

Q) Springer

S. Brandt et al.

vector (from time t’ onwards) which would imply that Si iS
not of type 2.

This implies that if a;’s subschedule would also continue
at and after time t + N + 1 on an empty grid, then a; would
cycle through the same movement on and on, starting from
time t’. Hence, if there is a cell c that is visited by a; in some
state g in the (continued) movement after time t””, then there
must also be a point in time before t” (during A) at which
aj Visits c in state g. It follows from the definition of our
schedule that Si ends before time rt”, yielding a contradiction
to our assumption. Oo

Lemma 3 Any subschedule Si of type 1, where agent a; ends
in the same cell from which it started, consists of at most
N(2N + 1) time steps. More generally, any subschedule Si
of type 1, where a; ends ina cell of distance at most D from the
cell from which it started, consists of at most N(2N +1+D)
time steps.

Proof We start by proving the special case where a; ends
in the same cell from which it started. Suppose for a con-
tradiction that there is a subschedule Si as described in the
lemma that consists of more than V(2N + 1) time steps. Let
t and u denote the points in time when Si starts and ends,
respectively. Since a; does not encounter any other agent
between time ¢ and time u, it behaves like a single agent on
an empty grid between ¢ and uw. In particular, there is a travel
vector (x, y) of agent a; from time ¢ + | to time u — | since
NQN+1)-1>N.

For reasons of symmetry, we can assume w.l.o.g. that x >
0 and y > OQ. Note that x = 0 = y is not possible since in
that case a; would cycle through the same (cyclic) movement
over and over without meeting any other agent, which would
imply that si is not of type 1. Let p be the travel period
which, according to its definition, is at most N. Let g be
the state whose second occurrence during Si (excluding the

occurrence of the state at the beginning of 3) comes earliest.
Let t’ be the time when g occurs for the first time. Since
t! <t + N, we know that x!, > x) — N.

Now, as in each travel period a; increases the x-coordinate
of the cell it occupies by at least 1, it follows that at time
t’+2N - p the x-coordinate of the cell a; occupies is at least
x! + N.Furthermore, since in each further travel period agent
aj would advance by at least one cell in (positive) x-direction
in total and p < N, after time t’ + 2N - p agent a; will never
have an x-coordinate of less than x! +1,1.e., it will never reach
c! then. But a; also cannot have visited c! (= cl) between time
t+landt’+2N-psincet/+2N-p<t+N(2N +1) and
we assumed that si consists of more than N(2N + 1) time
steps. Thus, we obtain a contradiction, which proves the first
lemma statement.

For the more general second statement, by an analogous
proof we obtain that after time t’ + 2N -p+D.- p agent a;
will never have an x-coordinate of less than x! + 1+ D,ie.,
A tight lower bound for semi-synchronous collaborative grid exploration

it will never reach ct then. But, since t’ +2N-p+D-p<
t+N(2N+1+4+D), qa; also cannot have visited ct between
time t+1 andt’+2N-p-+D- p, under the assumption that Si
consists of more than N(2N +1-+ D) time steps. Hence, this
assumption must be false, and the lemma statement follows.

O

Finally, we show that the number of consecutive steps an
agent is scheduled for (and hence also which steps the agent
takes) from a given snapshot of the system onwards does not
depend on the execution history.

Lemma4 Lett < t’ < t”, and assume that some subschea-
ule S'. of agent aj begins at time t and ends at time t”. Then
the number t” —t’ of steps agent a; is scheduled for from time
t’ onwards is exactly the number of steps agent a; would be
scheduled for if its subschedule started at time t' (given the
same location of all three agents as in the former scenario at
time t’). In particular, the definition of our schedule ensures
that the location of the agents combined with the information
which agent is scheduled next uniquely determines all further
moves taken by the agents.

Proof This follows directly from Lemma 1, the stopping con-
ditions of Cases | and 2, and the fact that, at any point in time,
the decision an agent takes (if itis scheduled) does not depend
on the execution history.

6 Traveling and meeting

Having defined and studied the schedule, we now proceed
with our lower bound proof as described in Sect. 4. The next
lemma shows that for each distance there is a point in time
after which the farthest two agents are never closer than this
distance.

Lemma5 For each distance D there is a time T such that
at any time t > T the largest pairwise distance of the three
agents is at least D.

Proof Suppose that the lemma statement is not true. Then
there is an infinite sequence 7 of points in time such that
at each of these points in time the largest pairwise distance
of the three agents is less than D. Since the distances of the
agents are less than D at all points in time from 7 and the
number of states the three agents can be in 1s finite, it follows
that there must be points in time ¢, t/ € TJ such that (1) each
agent is in the same state at ¢ and t’, (2) x! —x/ = xi, —xi, and
y} —y/ = yl, —y/, for alli, j € {1, 2, 3},i 4 j, and (3) the
same agent is scheduled to move next. Since the agents are
oblivious of the absolute coordinates of the grid, this implies
that from time t’ on, the agents will repeat the exact behavior

477

——-_——sd >) Oh

Fig. 2 An example showing a possible movement (red) of an agent
whose travel vector is given by the black arrows. The agent performs
the total movement given by the travel vector in at most N time steps,
or more precisely, during one travel period

they showed starting at time t, by Lemma 4. Hence, at time
t’+(t’ —t) the agents will again be, with (possibly) translated
absolute coordinates, in the exact same configuration and so
on.

Define (x, y) = (x1, — xj, yl, — yj), where i = 1 (which
implies that this equation also holds for i = 2,3). Vector
(x, y) describes the total movement of each of the agents
during each of the (repeating) time periods of length t’ — tf.
It follows that each cell that has not been explored by time
t must be at distance at most t’ — t from some cell that is
obtained by adding a multiple of the vector (x, y) to one cell
from {c}, c?, c3}; otherwise it will never be explored. Since
each such cell at distance at most t’ — t (which is constant)
must lie in a band of constant width and “direction” (x, y) that
contains ch, c? or om , there are infinitely many cells that must
have been explored before time rt. This yields a contradiction.

O

For any distance D, we denote by Tp the smallest time T
for which it holds that at any time t > T the largest pairwise
distance of the three agents is at least D. In the following
we collect a number of useful definitions regarding the meet-
ings of different agents. In particular, we distinguish between
three different types of agents at times when one agent is
traveling from another agent to the far-away agent whose
existence is certified by Lemma 5. For an illustration of a
travel over a large distance (i.e., allowing for multiple travel
periods), see Fig. 2.

Definition 1 For any ¢t > 0, we define the meeting set M; as
the set of agents that are not alone in the cell they occupy, at
time t. We call the infinite sequence (Mop, M1, ...) the meet-
ing sequence. If for a subsequence (M;, M;+1, ..., Mr+4;) of
the meeting sequence it holds thati > 0, M; 4 4, Mi4; 4
and M;i; = WY for allO < j < 1, then we call the pair
(t,t +7) a meeting pair. Now, let (t, wu) be a meeting pair
such that |M;| = 2 = |M,| and M; ~# M,. Then we call

Q) Springer
478

(t, u) a travel meeting pair. Moreover, we call the (uniquely
defined) agent a contained in M,N M,, a traveling agent (for
(t, u)), the agent contained in M; \ {a} a source agent and
the agent contained in M,, \ {a} a destination agent.

In order to continue according to our high-level proof idea
from Sect. 4, we need a few helping lemmas that highlight
properties of the previous definitions. We start with a lemma
that shows an important property of the meeting sequence:

Lemma 6 Each of the three agents is contained in infinitely
many of the M, from the meeting sequence.

Proof Suppose that there is an agent a; that is not contained
in infinitely many of the M,, 1.e., there is a point in time u
such that a; ¢ M, for all t > u. Then, starting from time
u, the exploration by the two agents a-,r # i is entirely
independent of the exploration by agent a; since they never
meet again. Thus, we get a contradiction analogously to the
argumentation in the proof of Lemma 1. Oo

Next, we study travel meeting pairs more closely. In
Lemma 7, we present bounds on the number of subsched-
ules of the different types of agents in the time frame given
by a travel meeting pair, and examine the types of the sub-
schedules. Afterwards, in Lemma 8, we bound the number of
time steps between two subsequent travel meeting pairs from
above. In both cases, the results only hold from a large enough
point in time onwards, but this is sufficient for our purposes
since before that point in time only a constant number of
cells were explored. Note that, in general, we do not attempt
to minimize the dependence on WN in our bounds as showing
the finiteness of certain parameters is, again, sufficient for
our purposes. Instead we prefer to choose the simplest argu-
ments that lead to the desired finiteness results, even if they
augment the actual bound by a few factors of N.

Lemma 7 There is a point in time T such that, for each travel
meeting pair (t, u) witht > T, the following properties hold:

1. The traveling agent for (t, u) is scheduled exactly once
(for a number of time steps) between time t and time u.

2. The subschedule of the traveling agent is of type 1 and
ends exactly at time u.

3. The source and the destination agent for (t, u) are sched-
uled at most once (for a number of time steps).

4. If the source or the destination agent is scheduled, then
its subschedule is of type 2.

Proof Recall the definition of Tp for any distance D. Let
T > T»n+1, and consider an arbitrary travel meeting pair
(t,u) with t > T and traveling agent a;. Observe that if
the source agent is scheduled between time ¢ and time u,
then its subschedules must be of type 2, because the source

Q) Springer

S. Brandt et al.

agent is not contained in the meeting set M,. Hence, if a;
is not scheduled at all between time ¢ and time wu, then the
source agent must be scheduled at most once (because of the
specification of our schedule) which implies that its distance
from c! at time u is at most N, by Lemma 2. But since in
this case a; and the destination agent meet at c! at time u, we
obtain a contradiction to the fact that T > Toy) +). Thus, we
know that a; 1s scheduled at least once between time t and
time u.

Now, assume for a contradiction that the first subschedule
of aj between time ¢ and time u is of type 2. This implies that
if one would schedule a; on and on, it would repeat a state in
the same (empty) cell after at most NV + | time steps and then
cycle through (a part of) the same movement it performed
before. Hence, even if there are more subschedules for a;
than one (between time ¢ and time w), it will never reach a cell
that has a distance of more than N from cl, Since analogous
statements hold for the source agent, we know that at time
u the distance between the source agent and the cell where
a; and the destination agent meet is at most 2N which again
contradicts our specification of 7. Thus, we know that the
first subschedule of a; is of type 1.

It follows that a;’s subschedule ends exactly at time u since
the subschedule must end with a; meeting the destination
agent, which also implies that a; 1s scheduled exactly once
between time ¢ and time uv. Moreover, the subschedules of
the source and the destination agent (if they are scheduled
at all between time ¢ and time uw) must be of type 2 since
(t, uw) is a (travel) meeting pair. Furthermore, by the nature
of our schedule, the source and the destination agent must be
scheduled at most once between time f and time uw. Oo

Lemma 8 There is a point in time T such that the following
holds: If (t, u) and (t’, u’) are travel meeting pairs such that
T <t <t' and there exists no travel meeting pair (t", u")
with t < t’ <t', thent’ —u < 8(N +1)°.

Proof Observe that from the definition of a travel meeting
pair it follows that t’ > u. Set T := Tyan+t)+1 and let
t,u,t’, u’ be as described in the lemma. W.l].0.g., let aj and
az be the agents contained in M,. Let t) < tp < --- < &
be exactly the points in time t; between u and t’ for which
M:, ~ & holds. It follows that all M;, are identical to M, =
My.

We claim that k < (2N* + 1)(N + 1). Suppose for a
contradiction that k > (2N2 + 1)(N + 1). Then, there must
be at least 2N? + 1 indices g € {1,...,k} such that a, or
az are scheduled to move at time ft, since each subschedule
of a3 between time u and ft’ is of type 2 and hence consists
of at most N time steps, by Lemma 2. It follows that there
must be some | < g < h < k such that a; and ap are in the
exact same (pair of) states at time t, and at time fy, and the
same agent is scheduled next. By Lemma 4, this implies that
a, and a2 go through the same movement that they executed
A tight lower bound for semi-synchronous collaborative grid exploration

between time ¢t, and t,, over and over again, starting from
time ¢;,, until at least one of them encounters agent a3.

During this movement, i.e., anytime between ft, and u’, our
agents a; and a2 cannot move too far from each other as we
show in the following: If an agent executes a subschedule of
type 2 and then its next subschedule is again of type 2 (and no
other agent is in the cell from which this second subschedule
starts), then the agent ends both subschedules in the same cell
and the same state, due to the specification of type 2 subsched-
ules. Hence, if a; and a2 together perform three consecutive
subschedules of type 2 (disregarding any subschedules of
a3), then in each subsequent subschedule they will repeat the
same movement as in the last subschedule, until one of them
encounters a3." Since we already established that a; and a2
would repeat the movement they executed between time fg
and t;, (which includes subschedules of type 1) over and over
again if none of them met a3, it cannot be the case that there
are three consecutive subschedules of type 2 (of a; and az).
Hence, between any two subschedules (of the agents a; and
az) of type 1 between time tg and time u’, there are at most
two subschedules of type 2 (of those agents). Now by Lem-
mas 2 and 3, the fact that after each subschedule of type 1
the agents a; and a2 are in the same cell, and our established
observation about the cyclic movement following fy, it fol-
lows that the maximum distance of the two agents between
time ft, and time u’isatmost N(2N+1+D) where D = 2N.
Hence, when one of the two agents encounters agent a3, then
the other is at distance at most V(4N + 1). This contradicts
the fact that ¢ > Ty (4n-+1)+1 and proves the claim.

From the above, we obtain the following picture: There
are at most k < (2N? +.1)(N + 1) subschedules of type |
between time u and t’ (since, when a subschedule of type 1
ends, the corresponding element from the meeting sequence
is non-empty). Between any two subschedules of type 1 (and
possibly before the first/after the last) there are at most two
subschedules of type 2 of agents a, and az, which gives us a
total of at most 2 - (2N2 + 1)(N + 1) subschedules of type 2
of agents a; and az together between time u and t’. For agent
a3, we obtain an upper bound of 1/2 -3- (2N? + 1)(N +
1) + 1 for the number of subschedules between time u and t’
(which are all of type 2), due to the facts that there are atmost
3 - (2N* + 1)(N + 1) subschedules of the other two agents
in that time frame, and that the three agents are scheduled in
a cyclic fashion. Now, by Lemmas 2 and 3, we obtain that
t'—u < (7/2-(2N7 +1)(N+1)+)DN+4+(2N?7+1)(N +
1)N(2N+1+D) where D = 2N. Hence, t'/—u < 8(N+1)°.

O

4 This statement does not necessarily hold for only two consecutive sub-
schedules of type 2 since the agent a who moved first may encounter the
second agent (who moved during the subsequent subschedule) during
a’s next subschedule.

479

Using Lemma 8, we show in the following that for any
travel meeting pair (f, u), the information about the states of
the agents, which two agents are in the same cell, and who is
scheduled next, all at time u, already uniquely determines a
lot of information about the agents at the starting time of the
next travel meeting pair. Again, this result only holds from a
sufficiently large point in time onwards. This concludes our
collection of helping lemmas.

Lemma 9 There is a point in time T such that the following
holds:

For any two subsequent travel meeting pairs (t, u), (t’, u’)
with T <t < t’, the tuple (q}, q7,q3, a", My) uniquely
determines the tuple (Gyns Vis Qs Ch — cl, c, — C2, c —
C3, an’, M,), where al, resp. al’, denotes the agent
scheduled at time u, resp. t’:

Proof Let T be sufficiently large so that the condition T >
Tg. +1)544N41 holds and Lemmas 7 and 8 apply. Let f, u, t’,
u’ be as described in the lemma. Observe that the subschedule
of the traveling agent for (t, uw) ends exactly at time u, by
Lemma 7, and thus the subschedule of a7°*' actually starts at
u. Moreover, due to the choice of 7, the agent not contained
in M,, will not be in the same cell as another agent until at
least (and including) time u + 8(N + 1)? + 4N, while the
two agents contained in M,, are in the same cell at time uw.
Hence, if we knew of which types the subschedules of the
three agents are until time u + 8(N + 1)> + 2N, then we
could (deterministically) compute the exact behavior of the
three agents up to time u + 8(N + 1) +2N.

Fortunately, the types of the subschedules are uniquely
determined by the tuple (q), q7, q?, a™™', M,,) in a simple
way. Consider the first subschedule, 1.e., the one of agent anext
starting at time w. Now consider the state of a?**' whose sec-
ond occurrence would come earliest if we scheduled a?*'
indefinitely (not counting the occurrence of a state at time u
and ignoring the existence of any other agents on the grid). If
this second occurrence happens in the same cell as the previ-
ous occurrence of the same state and a?**' did not encounter
any other agent after time uw until the time of the second
occurrence, then the subschedule of a?**' must be of type 2
according to the specification of our schedule. Otherwise, it
must be of type 1.

Note that a?**' could only have encountered another agent
until the second occurrence if these two agents are contained
in M,, due to our choice of T. More generally, any meeting
during such a “simulation” (for determining if the respective
subschedule is of type 2) must be between the two agents
from M,, if the agent whose potential subschedule is simu-
lated starts its subschedule at time u + 8(N + 1)°+2N atthe
latest, again due to our choice of 7. (Here, we use that such
a simulation contains at most 2/N time steps until the second
occurrence.)

Q) Springer
480

Now, the specification of the type of the subschedule
in combination with the information contained in the tuple
(qi, q7,q?, a0, M,,) uniquely determines the states of the
agents at the time the subschedule of qnext ends, their relative
locations compared to time u and which agent is to move
next.” Then, we can iterate this argument for the second,
third, ..., subschedule (from time u on) and obtain that for
each of these subschedules the exact movement of the sched-
uled agent is uniquely determined by (q], q?, q?, anxt M,).
Again, this argumentation holds up to (and including) time
u + 8(N + 1)? + 2N. By Lemma 8, we know that t’ <
u + 8(N + 1)°. On the other hand, we have that u’ >
u + 8(N + 1)° + 2N, due to our choice of T. Hence, the
agent scheduled at time u + 8(N + 1)> + 2N must be the
traveling agent for (t’, u’), by Lemmas 2 and 7.

Moreover, the above considerations ensure that the exact
behavior of the agents up to (and including) time u +
8(N + 1)? + 2N is uniquely determined by the tuple
(qi,q2,q7,a0', M,). Thus, also the traveling agent for
(t’, u’) is uniquely determined by (q/, g7, q3, at', M,,), and
also the parameter t’ — wu. Since t’ < u + 8(N + 1), it
follows that (q], qe, q? ,an* M,,) uniquely determines the
tuple (q), qi, qi, ch — cl, c — C2, c — 3, arent, M,). a

7 The travel vector and a modulo operation

After collecting the above helping lemmas, we are now all set
to formally prove the (remaining) statements from our proof
sketch. Before going through the statements one by one, let
us for convenience define the notion of a travel: Let (t, uw) bea
travel meeting pair. By Lemma 7, we know that the traveling
agent for (t, uw) 1s scheduled exactly once between ¢ and wu.
We call the corresponding subschedule (or the movement
during that subschedule) a travel. Recall the definition of
travel vector and travel period. Note that a travel only has a
travel vector (and period) if the traveling agent repeats a state
(in empty cells) during the travel. Furthermore, observe that
if a travel has a travel vector, then at least one entry of the
travel vector is non-zero, due to the choice of our schedule.
We now prove the first of the remaining statements, namely,
that after a certain point in time, any travel vector has the
same slope.

> To be a bit more precise, we can simply execute each (relative) step
of any agent between time u and tr’ one after the other, as at each point
in time, we have all the information necessary to compute the step
(in particular, which agent is scheduled, due to the above simulation
argument). Note that for this, we don’t need the exact location of the
agent not contained in M,, relative to the location of the agents contained
in M, as we know that the former agent will not meet any other agent
until time wu + 8(N +1)? +4N >t’ +2N.

Q) Springer

S. Brandt et al.

Lemma 10 There is a point in time T and a (possibly nega-
tive) ratio r such that each travel starting at time T or later
has travel vector (x, y) with y/x =r. For the sake of sim-
plicity, assume that r is set to o© if x = 0.

Proof Let T be sufficiently large so that T > 72x42 holds
and Lemmas 7 and 8 apply. Then we know that any travel
starting at time T or later actually has a travel vector (and
period), by Lemmas 2 and 7. Now, consider two travel meet-
ing pairs (t,u) and (t’,u’) with T < t < tf’ such that
there is no travel meeting pair (t”,u”) with t < t” < 1’.
Let (x, y), (x’, y’) be the travel vectors for the travels cor-
responding to (t, u) and (t’, wu’), respectively. Assume that
y’/x' # y/x, where, again, we set the ratio to oo if the
denominator is 0. Note that not both of x and y (or x’ and y’)
can be 0. Let cg and c; be the cells at which the travel with
travel vector (x, y) starts and ends, respectively, and Co and
c, analogously for the travel with travel vector (x’, y’).

By the characterization of the travel of a single agent
and the fact that the travel period is always at most JN,
we know that there are positive integers b and b’ such that
Dist(c1, co +b - (x, y)) < N and Dist(c}, cg +b’: (x', y’))
< N. Moreover, by Lemmas 2 and 7, the source agent
for (t,u) travels at most a distance of N between time
t and u since its subschedule is of type 2 if the agent
is scheduled at all. The same holds for the destination
agent for (t’, uv’) between time t’ and u’. By Lemma 8, it
follows that Dist(co,c}) < 8(N + 1)° + 2N (since the
source agent for the first of the two travels is the destina-
tion agent for the second) and Dist(c, Co) < 8(N + 1)> ;
Combining our above distance observations, we also obtain
Dist(ci, co +b (x, y) + b'- ', y')) < N4+8(N+IP4N,
which together with Dist(co, c}) < 8(N +1)? +2N implies
Dist(co, co + b+ (x, y) +b’: (x’, y’)) < 16(N + 1)° +4N.

Let D => N be some positive integer. We now require,
additionally to the above requirements regarding T, that
T > Tp. Also fix some arbitrary x, y, x’, y’ such that (x, y)
and (x’, y’) are possible travel vectors of a single agent. For
a contradiction, assume that x, y, x’, y’ have the properties
specified at the beginning of the proof (which implies that
also all of the above conclusions hold).

At the time when the first of the two considered trav-
els starts there are two agents at cg and c; while the last
agent is at distance at most N from cg. Hence, the dis-
tance between cg and c is at least D — N. This implies that
b- (|x| + |y|) = Dist(cy, co) - N > D —2N. Analogously,
we obtain b’ - (|x’| + |y’|) > D —2N. Since x, y, x’, y’ are
fixed, we can therefore make b and D’ arbitrarily large by
increasing D. By increasing b and b’, we can in turn make
Dist(co, co + Db: (x, y) +b’ - (x’, y’)) arbitrarily large, since
y’/x' # y/x (which implies that there is an angle between
the two vectors (x, y) and (x’, y’) that is not 0° or 180°).
Hence, if D is sufficiently large, then the above inequality
A tight lower bound for semi-synchronous collaborative grid exploration

Dist(co, co +b: (x, y) +b: (x’, y')) < 16(N + 1)? + 4N
is not satisfied anymore, which shows that y’/x’ = y/x.
Note that the magnitude D has to reach for this (in our
proof by contradiction) depends on x, y, x’, y’. However,
since the number of possible travel vectors of a single agent
is bounded by the number of states in its finite automaton,
we can simply derive a sufficiently large D for each of the
finitely many possible combinations for x, y, x’, y’ and then
choose a T that is larger than all of the Tp. Oo

Note that the exact value of r depends only on the finite
automaton governing the behavior of the three agents. From
now on, we denote the ratio whose existence is certified by
Lemma 10 by r. W.1.0.g., we can (and will) assume that r > O
(and that r ~ oo), for reasons of symmetry. Recall that any
travel vector has at least one non-zero entry. The next step on
our agenda is essentially to show that the state of an agent at
the end of a travel does not depend on (the full information
about) the vector between start and endpoint of that travel
(and other parameters), but only on a reduced amount of
information regarding this vector (and the other parameters).
More specifically, the required information about this vector
is the result of applying a certain modulo operation to the
vector.

We then proceed by showing that the information about (1)
the states of the agents, (2) their relative locations after apply-
ing the modulo operation, (3) which agents shared a cell most
recently, and (4) which agent is scheduled next, at the start of
a travel, is enough to determine the exact same information
at the end of the travel. Now, we benefit from the previous
reduction of information due to our modulo operation in the
sense that we can show that there are only constantly many
combinations of relative locations of the three agents (that can
actually occur) after applying the modulo operation. This, in
turn, implies that there are only constantly many possibili-
ties for the whole aforementioned information tuple at the
start and end of a travel, which will enable us to prove our
main theorem. We start by defining our modulo operation
in Definition 2. Then we show a technical helping lemma,
Lemma 11, which finally enables us to prove the aforemen-
tioned relation between the information tuple at the start and
end of a travel in Lemma 12. Note that for technical reasons,
Lemma 12 gives a slightly different statement than indicated
above, dealing with travel meeting pairs instead of travels.

Definition 2 Let {(x1, y1), (x2, y2),..., (xz, ye)} be the set
of travel vectors that the agents can have if you let one of them
explore the grid starting in an arbitrary state (which clearly
is a superset of the actually occurring travel vectors in our
multi-agent case). Let R be the subset of the above set that
contains exactly the vectors (x;, y;) that satisfy y;/x; =r.
From now on, denote by x the least common multiple of the
|x;| from the vectors in R and set y := rx. It follows that
(x, y) is a (possibly negative) integer multiple of any of the

48]

vectors from R. Note that R cannot be empty since otherwise
it is not possible that the agents explore the entire grid, due
to Lemmas 6 and 10.

Now, let w, z be integers and let b be the smallest integer
such that w+ bx > 0. (This is well-defined since x > O, due
tor ~ ow.) We define (w, z) (mod (x, y)) := (w+bx,z+
by). For two cells (w’, z’), (w”, z”), we define (w”, z”) ©
(w’, 2’) = (w" — ww", 2" — z’) (mod (x, y)).

Note that Definition 2 ensures that for any (w, z), (w’, z’)
where (w’ — w, z’ — z) is a multiple of (x, y), we have that
(w,z) (mod (x, y)) = (w’, z’) (mod (, y)).

The following lemma shows that if an agent in state g
travels from some cell c to another (sufficienly distant) cell
c’, it is not required to know the exact location of c relative
to c’ to determine the state in which the agent arrives at c’:
instead, it is sufficient to know the relative location of c and
c’ modulo the respective travel vector. Formally, we prove
this by showing that any two choices for c that differ by a
multiple of the travel vector result in the agent having the
same state at c’.

Lemma 11 Leta be anagent, g astate froma’s finite automa-
ton and c,c’,c” cells of the grid such that the following
properties are satisfied:

1. Dist(c, c’) > 2N and Dist(c”, c’) > 2N

2. There is an integer b such that c"” —c = b-(w, z), where
(w, z) is agent a’s travel vector if it starts in state q.

3. If agent a starts in cell c in state q on an otherwise empty
grid, then it arrives at c’ after finite time.

4. Ifagenta starts in cell c" in state qg onan otherwise empty
grid, then it arrives at c’ after finite time.

Let q’ denote the state in which a arrives at c’ (for the first
time) when starting from c (in state q), and q" the state in
which a arrives at c’ (for the first time) when starting from
c” (in state q). Then it holds that gq’ = q”.

Proof If g is a state that agent a assumes only at the very
beginning (if scheduled on an otherwise empty grid with in1-
tial state g), then after at most N steps a assumes a state q*
that it assumes more than once (1.e., after one (and hence,
each) travel period a will be again in state g* and have trav-
eled exactly “along” the travel vector). Let c* be the vector
describing a’s movement from the initial cell to the cell where
a first assumes state g*. From the properties given in the
lemma, it follows that these properties are still satisfied if we
replace gq by g*, andc, c” by c + c*, c” +c”, respectively,
except that we have to replace each occurrence of “2N” by
““N” in the first property. Hence, it is sufficient to prove the
lemma for those states g that a will assume again after exactly
one travel period (i.e., those states g that a assumes during its

Q) Springer
482

periodic behavior), under the modification to the first prop-
erty. Thus, in the following assume that g is of this kind, and
that the first property only guarantees Dist(c, c’) > N and
Dist(c”, c’) > N.

If c = c”, then the lemma holds trivially, thus assume that
c #c”. W.l.o.g., we can assume that b > 0, which implies
that, if agent a starts in cell c in state g (say, at time r), then
a arrives at some point in time u > t¢ in cell c” in state g
(possibly a visited c” before in some other state). Hence, if
a does not visit cell c’ between time ¢ and time u, then the
lemma also holds since after arriving at c” in state g, a will
perform the exact same movement as if it started in c” in state
q.

Thus, consider the last remaining case, i.e., assume that a
visits c’ for the first time at some time t < t’ < u. W.L.o.g.,
we can assume that w and z are non-negative and w > z.
(Also recall that at least one of w and z is non-zero.) Let
co, C1,... be the cells that a visits in state g at and after
time ¢t, where co and cx, for some k > 0, are the cells that a
visits at time ¢ and u, respectively, i.e., cg = c and cy = c”.
Observe that cj+1 = cj +(w, z) holds for each 7. Denote the
x-coordinates of c’ and cy = c” by x’ and x”, respectively.
Since w > z, it follows that Dist(c;, c’) > Dist(c”, c’) > N
forall j > kifx’ < x”, and Dist(c;, c’) > Dist(c", c') > N
for allO < j < kif x’ > x”. Leth be the largest index such
that a visits c, in state g at or before time t’. Thenh < k, and
Dist(cy, c’) < N — 1 since traveling from cy (in state g) to
Cn+1 (in state g) takes a at most one travel period, so at most
N time steps. If x’ > x”, then we obtain a contradiction to
our above observation, thus it follows that x’ < x”. But this
implies Dist(c;, c’) > N for all 7 > k which in turn implies
for all 7 > k that c’ cannot be visited by a between visiting
c; (in state q) and c;+1 (in state q). Hence, a does not visit c’
at or after time wu. Since a performs the exact same movement
from time u onwards as if it would have initially started in c”
in state q, it follows that agent a starting in c” in state g never
visits c’, which is a contradiction to our assumptions. Thus,
this last remaining case cannot occur, which completes the
proof. Oo

Lemma 12 Let (t, u) be a travel meeting pair. Consider the
tuple

. 1,2 ,3 1 2 1 3.2 3 t
Q; — (Gi > UG Ocr, Cy OC, Ci Oca", M,),

where aj

again denotes the agent that is scheduled at
time t. There is a point in time T such that the following
holds: If t > T, then Q, uniquely determines the tuple

1 ,2 ,3 Zl 2 Al 3 2 3 t
Ou = (Gur Gio Vin Cu OC Cy OC Ce OO Gs Mu).

Proof Let T be sufficiently large so that T > 73y+4 1 holds
and Lemmas 7 and 10 apply. Let (ft, uw) be a travel meeting
pair with t > 7. We start by observing that the subschedule

of ap**' starts at time t. The reason for this is that if aP™*' €

Q) Springer

S. Brandt et al.

M,, then a?**' cannot have been scheduled at time ¢ — 1 as
otherwise its subschedule would not continue at time ¢ due
to the specification of our schedule, and if a?®*' ¢ M,, then
(t, u) would not be a travel meeting pair.

Combining the argumentation, about the uniquely deter-
mined subschedules, from the proof of Lemma 9 with
Lemmas 2 and 7, we see that Q; uniquely determines which
agent is the traveling agent for (ft, uw), which in turn uniquely
determines M,,. By Lemma 7, the last agent that is scheduled
before time u is exactly the traveling agent, which uniquely
determines ap".

Moreover, the information which agent is the traveling
agent together with the information which agent 1s scheduled
at time ¢ (i.e., a7") uniquely determines which agents are
scheduled between time ¢ and time u (and all of them are
scheduled only once, possibly for multiple subsequent time
steps, if they are scheduled at all). Since no two agents meet
between time ¢ and time u, it follows that the states of the
source agent and the destination agent at time u are uniquely
determined by the states of the three agents at time ¢ (and
the information which two agents are contained in M,). Here
we use that the subschedules of those agents (if they are
scheduled at all) are of type 2, according to Lemma 7.

Similarly, the exact vectors (possibly the vector (0, 0))
by which the source and the destination agent move are
uniquely determined by Q;. By Lemma 7, the subsched-
ule of the traveling agent is of type 1 and ends in the cell
that is occupied by the agent not contained in M;. Since
addition and our modulo operation behave nicely (more
specifically, because ((w, z)+(w’,z’)) (mod (x, y)) =
((w, z) (mod (x, y)) + (w’, z’)) (mod (x, y)) for all inte-
gers w, z, w’, z’), we get that c} So C2, cl So c3, and c? So ory
are uniquely determined by the vectors by which source and
destination agent move (combined with the information con-
tained in Q;), and thus also by Q;.

It remains to show that the state of the traveling agent at
time uw is uniquely determined by Q;. Denote the traveling
agent by a;. Since t > 73y41, the distance between a; and
the destination agent at time ¢ is at least 3N + 1. When
the subschedule of a; starts at some time t < ft’ < u, the
destination agent may have moved from its location at time
t, but since the subschedule of the destination agent is of type
2 (as observed above), it has moved a distance of at most N,
by Lemma 2. Hence, at time t’ the distance between a; and
the destination agent is at least 2N + 1.

Now, let c, c” be cells with a distance of at least 2N + 1 to
the location c’ of the destination agent at time t’ and assume
that c’ 6c = c’ 6c”. Then, according to the definition of
our modulo operation, c” — c is a (possibly negative) integer
multiple of (x, y), and thus also of the travel vector of a;, by
Lemma 10. Thus, by Lemma 11, it follows from the above
that qi, is uniquely determined by Q;. Note that although a;
may not be alone in its cell at the time its subschedule starts,
A tight lower bound for semi-synchronous collaborative grid exploration

we can still apply Lemma 11 since after the first step of a;
it is alone in its cell while all other requirements for Lemma
11 are still satisfied. This completes the proof. Oo

8 Three semi-synchronous agents do not
suffice

We now conclude our lower bound proof with Theorem 1.
Roughly speaking, Lemma 12 certifies that the behavior of
the agents between any two subsequent occurrences of the
same fixed information tuple Q; is reasonably similar. Since
there are only finitely many different Q, that actually occur,
it follows that the behavior of the agents loops, in a very
informal sense. From this, we can derive a contradiction to
the assumption that all cells are explored.

Theorem (Theorem 1 restated) Three semi-synchronous
agents controlled by a finite automaton are not sufficient to
explore the infinite grid.

Proof Suppose for a contradiction that three agents suffice
to explore the grid. From the definition of a travel meeting
pair and Lemma 6, it follows that there are points in time
such that (t;, u;) is a travel
meeting pair for any j > | and for every travel meeting pair
(t’, u’) there isa j > 1 witht’ =¢; andu’ = w;.

Recall the definition of Q; in Lemma 12 (in particular,
recall that ¢ is assumed to be a point in time for which there is a
travel meeting pair (t, u) “starting” int). Let T be sufficiently
large so that T > T; holds (where 7; is just Tp for D = 1)
and Lemmas 7, 8, 9, 10 and 12 apply, and let k be an index
such that ¢; > T and there isah > k with h — k even and
QO, = Q:,. Such ak must exist since there is only a finite
number of tuples of the general form Q; (after time 7) and the
number of travel meeting pairs is infinite, by Lemma 6. Note
that the finiteness of the number of tuples, in particular the
finiteness of the (combinations of the) relative locations of the
agents modulo (x, y), relies on the fact that the possible travel
vectors after time 7 are restricted by Lemma 10, together
with the fact that in the time span given by a travel meeting
pair source and destination agent are scheduled for at most
N steps, by Lemmas 2 and 7.°

Y<uj<sb<w<h<...

© More precisely, for any travel meeting pair (t, uv) with t > T, the
vector between the locations of any two agents at time ¢ can be written
in the form g-(x, y)+(v, w) where g is some integer and |v| < |x|+2N,
|w| < |y|+2N, by Lemmas 2, 7, 10, and the fact that any travel period
is at most NV. The finiteness of the number of tuples of the form Q; now
follows from the observation that the first coordinate of (g - (x, y) +
(v, w)) (mod (x, y)) = (v, w) (mod (x, y)) is at least O and at most
x (by Definition 2) and the absolute value of the second coordinate
therefore is at most |y| + 2N + (|x| + 2N) - |y| (since the smallest
integer b such that v + bx => O holds must satisfy |b] < |v| < |x| +2N
due to x > 0).

483
Consider the sequence

(tk, Uk), (tk+1, Uk+1)s ty (th, Un))

of travel meeting pairs, where h is the smallest index such
that h > k holds, h —k is even, and Q;, = Qy,. We examine
the cells that are explored by the source agent for (tz, ux)
between time ¢, and f,4; and by the destination agent for
(th-1, Ug+1) (which is the same as the aforementioned source
agent) between time f+ 1 and t,42. Then we iterate this exam-
ination, in each iteration increasing the indices by 2, and stop
at time ty. We say that the cells explored in the described way
are explored during even explorations.

In the first iteration, we obtain the following picture, where
we denote the source agent for (t,, ux) (1.e., the destination
agent for (th+1, Ux+1)) by a: The exact vector by which a
moves between time t and uz is uniquely determined by
Q;,, aS observed in the proof of Lemma 12. The exact vector
by which a moves between time uz and t+) 1s uniquely
determined by Q,,,, by Lemma 9. Similarly, the exact vectors
by which a moves between time #4; and uz; and between
time uz41 and t,42 are uniquely determined by Q;,,, and
Ou,,,» tespectively.

Moreover, by combining Lemmas 9 and 12, we see that
Qup> On) Qu,p,,, and Or,,, are all uniquely determined by
Q,,. Thus, the exact vector by which a moves between time fx
and time ¢, 2 is uniquely determined by Q,, . Furthermore, by
Lemmas 2, 7 and 8, the number of cells a visits between time
tz and time t,+42 is bounded by a constant. Note that each Q;,
also uniquely determines which agent is the traveling agent
(and hence which agent is the source/destination agent) for
(t;, u;), as observed in the proof of Lemma 12.

For the second, third, . . . , iteration we obtain an analogous
picture. Hence, the tuples Q;,,, Q1,,,... are all uniquely
determined by Q;,, and the locations of the respective source
agents at times ¢,42, th44,... are all uniquely determined by
Q,, and the location of the source agent for (t;,, ux) at time
tk.

We obtain the following bigger picture: The location of
the source agent for (t, ux) at time ft, together with Q,
uniquely determines both Q;, and the location of the source
agent for (f,, uy) at time t,, which, in turn, uniquely deter-
mine Qy,,(,-~ and the location of the source agent for
(tha(h—k)» Un+(h—k)) at time tp4(n—x), and so on. Hence,
there is a vector (w, z) such that the locations of the respec-
tive source agents at times t,, th, tha(n—k), tha2(n-k)» +++ are
c,c+(w, z),c+2(w, z),..., where c denotes the cell occu-
pied by the respective source agent at time t,. Moreover,
since the number of cells explored during an even explo-
ration between time f and fy, (and similarly between time
th+j(h—k) and th4(j+1)(n—k for each j > O) is bounded by a
constant (which follows from a similar observation above),
we get that there is a constant L such that each cell explored

Q) Springer
484

during an even exploration has a distance of at most L to some
cell of the form c+ j’-(w, z), where j’ is some non-negative
integer.

Moreover, by Lemmas 2, 7, 8, 10, and the definition of
even explorations, we know that each explored cell is close
to the travel of a traveling agent, i.e., there is a constant L’
such that each cell explored at or after time ¢, has a distance

of at most L’ to some cell of the form c’ + j” - (x, y), where

j” is some integer and c’ a cell explored during an even

exploration. Combining our observations and adding the fact
that only a constant number of cells are explored up to time
ty, it follows that there is a constant L” such that each cell
explored by the agents has a distance of at most L” to some
cell of the form c + j’:(w,z) + j” +(x, y), where j’, j” are
integers and j’ is non-negative. Hence, we can draw a line in
the grid such that all explored cells are to one side of the line,
yielding a contradiction to the assumption that three agents
suffice to explore the grid. Oo

Acknowledgements Open access funding provided by Aalto Univer-
sity.

Open Access This article is licensed under a Creative Commons
Attribution 4.0 International License, which permits use, sharing, adap-
tation, distribution and reproduction in any medium or format, as
long as you give appropriate credit to the original author(s) and the
source, provide a link to the Creative Commons licence, and indi-
cate if changes were made. The images or other third party material
in this article are included in the article’s Creative Commons licence,
unless indicated otherwise in a credit line to the material. If material
is not included in the article’s Creative Commons licence and your
intended use is not permitted by statutory regulation or exceeds the
permitted use, you will need to obtain permission directly from the copy-
right holder. To view a copy of this licence, visit http://creativecomm
ons.org/licenses/by/4.0/.

References

1. Albers, S., Henzinger, M.: Exploring unknown environments.
SIAM J. Comput. 29, 1164-1188 (2000)

2. Aleliunas, R., Karp, R.M., Lipton, R.J., Lovasz, L., Rackoff, C.:
Random walks, universal traversal sequences, and the complexity
of maze problems. In: FOCS, pp. 218-223 (1979)

3. Averbakh, I., Berman, O.: A heuristic with worst-case analysis for
minimax routing of two travelling salesmen on a tree. Discrete
Appl. Math. 68(1—2), 17-32 (1996)

4. Baeza-Yates, R.A., Culberson, J.C., Rawlins, G.J.E.: Searching in
the plane. Inf. Comput. 106, 234—252 (1993)

5. Bender, M.A., Slonim, D.K.: The power of team exploration: two
robots can learn unlabeled directed graphs. In: FOCS, pp. 75-85
(1994)

Q) Springer

S. Brandt et al.

6. Blum, M., Kozen, D.: On the power of the compass (or, why mazes
are easier to search than graphs). In: FOCS, pp. 132-142 (1978)

7. Blum, M., Sakoda, W.J.: On the capability of finite automata in 2
and 3 dimensional space. In: FOCS, pp. 147-161 (1977)

8. Budach, L.: Automata and labyrinths. Math. Nachr. 86(1), 195-282
(1978)

9. Chrobak, M., Gasieniec, L., Gorry, T., Martin, R.: Group Search
on the Line, pp. 164-176. Springer, Berlin (2015)

10. Cohen, L., Emek, Y., Louidor, O., Uitto, J.: Exploring an infinite
space with finite memory scouts. In: SODA, pp. 207—224 (2017)

11. Deng, X., Papadimitriou, C.: Exploring an unknown graph. J.
Graph Theory 32, 265-297 (1999)

12. Diks, K., Fraigniaud, P., Kranakis, E., Pelc, A.: Tree exploration
with little memory. J. Algorithms 51, 38-63 (2004)

13. Disser, Y., Hackfeld, J., Klimm, M.: Undirected graph exploration
with © (log logn) pebbles. In: SODA, pp. 25-39 (2016)

14. Duncan, C.A., Kobourov, S.G., Kumar, V.S.A.: Optimal con-
strained graph exploration. ACM Trans. Algorithms 2(3), 380-402
(2006)

15. Emek, Y., Langner, T., Stolz, D., Uitto, J., Wattenhofer, R.: How
many ants does it take to find the food? Theor. Comput. Sci. 608,
255-267 (2015). https://doi.org/10.1016/j.tcs.2015.05.054

16. Emek, Y., Langner, T., Uitto, J., Wattenhofer, R.: Solving the ANTS
problem with asynchronous finite state machines. In: ICALP, pp.
471-482 (2014)

17. Feinerman, O., Korman, A., Lotker, Z., Sereni, J.S.: Collaborative
search on the plane without communication. In: PODC, pp. 77-86
(2012)

18. Flocchini, P., Prencipe, G., Santoro, N., Widmayer, P.: Distributed
coordination of a set of autonomous mobile robots. In: Intelligent
Vehicles Symposium, pp. 480-485 (2000)

19. Fraigniaud, P., Ilcinkas, D.: Digraphs Exploration with Little Mem-
ory, pp. 246—257. Springer, Berlin (2004)

20. Hoffmann, F.: One pebble does not suffice to search plane
labyrinths. In: FCT, pp. 433-444 (1981)

21. L6épez-Ortiz, A., Sweet, G.: Parallel searching on a lattice. In:
CCCG, pp. 125-128 (2001)

22. Panaite, P., Pelc, A.: Exploring unknown undirected graphs. In:
SODA, pp. 316-322 (1998)

23. Rollik, H.A.: Automaten in Planaren Graphen, pp. 266—275.
Springer, Berlin (1979)

24. Sugihara, K., Suzuki, I.: Distributed algorithms for formation of
geometric patterns with many mobile robots. J. Robot. Syst. 13(3),
127-139 (1996)

25. Suzuki, I., Yamashita, M.: Distributed anonymous mobile robots:
formation of geometric patterns. SIAM J. Comput. 28(4), 1347-
1363 (1999)

26. Suzuki, I., Yarnashita, M.: Distributed anonymous mobile robots—
formation and agreement problems. In: SIROCCO, pp. 1347-1363
(1996)

Publisher’s Note Springer Nature remains neutral with regard to juris-
dictional claims in published maps and institutional affiliations.

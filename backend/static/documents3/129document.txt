Lu et al. Journal of Cloud Computing: Advances, Systems and Applications

(2020) 9:60
https://doi.org/10.1186/s13677-020-00207-5

Journal of Cloud Computing:
Advances, Systems and Applications

RESEARCH Oy else =e

An efficient and secure data sharing
scheme for mobile devices in cloud

computing

Xiuging Lu'*, Zhenkuan Pan’ and Hequn Xian’

Abstract

Check for
updates

 

With the development of big data and cloud computing, more and more enterprises prefer to store their data in
cloud and share the data among their authorized employees efficiently and securely. So far, many different data
sharing schemes in different fields have been proposed. However, sharing sensitive data in cloud still faces some
challenges such as achieving data privacy and lightweight operations at resource constrained mobile terminals.
Furthermore, most data sharing schemes have no integrity verification mechanism, which would result in wrong

computation results for users. To solve the problems, we propose an efficient and secure data sharing scheme for
mobile devices in cloud computing. Firstly, the scheme guarantees security and authorized access of shared
sensitive data. Secondly, the scheme realizes efficient integrity verification before users share the data to avoid
incorrect computation. Finally, the scheme achieves lightweight operations of mobile terminals on both data owner
and data requester sides.

Keywords: Big data, Security, Integrity, Cloud computing

Introduction

With the rapid development of information technology
and Internet of Things (IoT), enterprises generate more
and more big data, which needs to be stored and proc-
essed efficiently and securely. Cloud computing is a de-
veloped storage platform and has many advantages
including low cost and scalability [1-3]. Therefore, many
enterprises and individuals are apt to outsource their
data to cloud for storage and sharing with authorized
data requesters. For example, in a cloud based health in-
formation system, patients upload their health informa-
tion to cloud for sharing with medical experts to
diagnose diseases. Similarly, the manager of an enter-
prise not only want to store the big data in cloud, but
also want to share the data among their authorized em-
ployees wherever needed. Outsourcing data for sharing

 

* Correspondence: panzhenkuan@126.com

"College of Computer Science and Technology, Qingdao University, Qingdao
266071, China

Full list of author information is available at the end of the article

o) Springer Open

 

in cloud not only saves local storage space, but also
greatly reduces the cost of enterprises in software pur-
chase and hardware maintenance [4-6]. Although
people take advantages of this new technology and ser-
vice, their concerns about data security arises as well. Se-
curity problem in cloud is the most critical issue because
of the valuable information that data owners share.
Cloud providers should address privacy and security is-
sues as a matter of high and urgent priority [7-9]. One
of the prominent security concerns in data sharing is
data privacy. In addition, terminals of users are usually
resource-constrained mobile devices with small storage
space and low processing speed. Therefore, it is essential
to propose an efficient and secure data sharing scheme
for mobile devices in cloud computing.

Main contributions

We propose a lightweight and secure sensitive data shar-
ing scheme for mobile devices in cloud computing. The
main contributions of the paper are as follows.

© The Author(s). 2020 Open Access This article is licensed under a Creative Commons Attribution 4.0 International License,
which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give
appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if

changes were made. The images or other third party material in this article are included in the article's Creative Commons
licence, unless indicated otherwise in a credit line to the material. If material is not included in the article's Creative Commons
licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain
permission directly from the copyright holder. To view a copy of this licence, visit http://creativecommons.org/licenses/by/4.0/.
Lu et al. Journal of Cloud Computing: Advances, Systems and Applications

1) We design an efficient integrity mechanism based
on algebraic signature for sensitive data before data
sharing.

2) We guarantee privacy preserving of sensitive data in
sharing process and access authorization control for
data requesters.

3) We achieve lightweight computation operations on
data owner and data requester sides with mobile
devices.

Organization

The rest of paper is organized as follows. Section II in-
troduces the related works in secure data sharing. Sec-
tion III describes architecture and security requirements.
Section IV presents the definitions and preliminaries. In
section V, we describe the implementations of the effi-
cient data sharing scheme. We analyze security in sec-
tion VI and evaluate the scheme performance in Section
VIL. Finally, we conclude this paper in Section VII.

The related works

With more and more sensitive information sharing
among enterprise employees, preserving data integrity
and guaranteeing access control for only authorized
users to access the data has become the core security
problem. Therefore, security problems of data sharing in
cloud mainly focus on access control and data integrity
[10-14].

At present, data sharing schemes mainly employ ac-
cess control mechanism to achieve authorized access.
Akl and Taylor [15] proposed use of cryptography to
realize access control in hierarchical structures. As data
owner and the data center are not in the same trusted
domain in cloud storage system, access control schemes
employing Attributed Based Encryption (ABE) [16] are
put forward. ABE commonly comes in Key Policy ABE
(KP-ABE) and Cipher text Policy ABE (CP-ABE). KP-
ABE uses attributes to describe the encryption data and
builds policies into user’s key [17]. CP-ABE uses attri-
butes to describe user’s credentials and the user encrypt-
ing the data determines a policy on who can decrypt the
data [18]. Lewko [19] proposed the first unbounded KP-
ABE scheme. Waters [20] firstly put forward a fully
expressed CP-ABE scheme in the standard model.
Cheung and Newport [21] proposed another CP-ABE
scheme and proved its security in the standard model.
To ensure data security in smart health, Zhang and
Zhen [22] realize the fine-grained access control, cipher
text-policy attribute based encryption (CP-ABE). To
achieve privacy and authorized access, many other
schemes [23-33] are proposed in diverse fields and
applications.

To verify integrity of data in cloud, many integrity
verification schemes [26, 34—42] have been proposed in

(2020) 9:60 Page 2 of 13

recent years. Ateniese [34] proposed the first public
auditing scheme, which allows any public verifier to
check the data integrity. Later, to prove the integrity of
dynamic data, Ateniese [26] proposed another scheme
based on the symmetric key provable data possession
(PDP) scheme. To support dynamic operation of data,
Erway et al. [35] proposed a dynamic provable data pos-
session (DPDP) scheme by introducing an authenticated
skip list. Later many auditing schemes are proposed by
using the authenticated data structure to support dy-
namic data update. Zhu et al. [36] introduced an index-
hash table (IHT) for dynamic verification. Yang et al.
[37] proposed another authenticated data structure
called index table (ITable) to store the abstract informa-
tion of blocks. Tian [38] proposed a data structure
named Dynamic-Hash-Table (DHT). Wang et al. [39]
and Liu et al. [40] respectively proposed dynamic public
auditing schemes based on Merkle Hash Tree (MHT).
The two schemes can achieve both public verification
and dynamic data operations. However, block signatures
are generated by users, which would incur multitude
computation and communication overhead on the user
side. In 2018, Gan [41] proposed an auditing scheme on
algebraic signatures that can achieve lower computation
and communication costs. The properties of algebraic
signature allows cloud to return a sum of the selected
blocks in the proof instead of the original data file,
which saves the bandwidth between the cloud and the
verifier and make the algebraic signature suited for cloud
computing [42]. Nowadays, more and more schemes
[23, 43-52] on cloud computing security are put forward
to achieve great advantages.

Architecture and security requirement

System model

The system model consists of four entities named Key
Generator Center (KGC), Data Owner (DO), Cloud
Servers (CS) and Data Requester (DR) as depicted in
Fig. 1.

Key generation center (KGC)

It is responsible for generating public parameters and
master key for the system and issuing private key for
other entities.

Data owner (DO)

It is responsible to generate and encrypt the shared data,
define access structures, and divide encrypted data into
blocks.

Cloud servers (CS)

Cloud servers comes in Cloud Storage Servers (CSS) and
Cloud Manage Servers (CMS) based on their roles. CSS
is responsible for storing shared data, block tags and
Lu et al. Journal of Cloud Computing: Advances, Systems and Applications

(2020) 9:60 Page 3 of 13

 

yasnes kev

 

    
   

Private key

DO
ty (ete a DR
a oo ee
integrity eS
verification

     

Fig. 1 System Architecture

CSS

 

supply the data integrity proof. To save computation
and communication costs of mobile terminals of DO
and DR, CMS is employed to manipulate complex com-
putations including generating algebraic signatures of
blocks, verifying data integrity of shared data and com-
puting the intermediate data for encryption and
decryption.

Data Requester (DR): It is responsible to download
and decrypt the shared data for utilization. In the
scheme, only the authorized DR is able to download
shared data from CSS and decrypt the data.

In our secure data sharing scheme for mobile terminal
devices, DO has large sensitive data to share with legit-
imate DR. Before sharing, DO encrypts the data with his
private key and outsources the data to CSS. If a DR
wants to access the data, he must register his identity to
KGC and obtain his private key for decryption. To
achieve authorized access, only legitimate DRs with cor-
rect attributes can download and utilize the shared data.
To ensure cloud data intact and decrease computation
burden of requesters, CMS helps DR to verify the integ-
rity of data before sharing. Only when data is undam-
aged, DR downloads and decrypts shared data with his
private key.

Security requirement

In the scheme, we suppose CSS and CMS are both semi-
trusted. CSS is responsible to store data and block tags
for data sharing. However, once data is corrupt or lost, it
might launch forge attack or replace attack for economic
reasons. Similarly, CMS is curious about the content of
sensitive data, so the data should preserve secret to
CMS. In the scheme, we assume KGC is a fully trusted
authority and can honestly generate private key for the
system and other entity. Therefore, the following secur-
ity requirements of the scheme should be satisfied.

Data confidentiality

The shared data must keep confidential to CSS, CMS
and any unauthorized DRs for privacy and security. Any
disclosure of shared data is undoubtedly harmful to en-
terprise benefits. Consequently, it is important to ensure
the confidentiality of shared data.

Data integrity

The data should keep intact before shared by DR. It
means that the data is undamaged in an unauthorized
manner during storage and sharing process.

Authorized access
To achieve authorization, only DR with correct attri-
butes can access shared data stored in CSS.

User revocation

The membership of DR must be revoked to stop his ac-
cess to shared data when he leaves the organization. To
achieve security of the scheme, user revocation should
be required in the data sharing scheme.

Design goals

The data sharing scheme for mobile devices is designed
to achieve data privacy preservation, data security and
lightweight operations.

Privacy preservation

The scheme should satisfy data privacy during data shar-
ing process. As sensitive data is encrypted by data owner
before outsourcing to cloud and only authorized data re-
questers can access the encrypted data, the shared data
is private to CSS, CMS and any unauthorized DRs.
Lu et al. Journal of Cloud Computing: Advances, Systems and Applications

Data security

The scheme should achieve sensitive data security dur-
ing the whole sharing process. The security requirement
can be guaranteed by data confidentiality, data integrity,
authorized access and user revocation in the scheme.

Lightweight operations

The scheme should decrease computation operations of
DO and DR for efficiency. In our scheme, CMS is re-
sponsible to divide encrypted data into blocks and com-
putes block tags. Furtherly, when DR wants to access
shared data, CMS compute intermediate data of decryp-
tion to less DR’s computation burden.

Definitions and preliminaries
Denifitions

1) Discrete Logarithm (DL) Assumption. Suppose g is
a generator of multiplicative cyclic group G with
prime order g. On input yeG, there does not exist
probabilistic polynomial time algorithm that
outputs a value xeZ7 such that g* = y with non-
negligible probability.

2) Computational Diffie-Hellman (CDH) Assumption.
Suppose g is a generator of multiplicative cyclic
group G with prime order q. On input g*,g’«G,
there does not exist probabilistic polynomial time
algorithm that outputs g*eG with non-negligible
probability.

3) Access Structure. Suppose P = {P}, Po, ..., P,,} isa
set of parties. A collection of W¢ 2” is monotone if
VB,C:BeW and BCC then Ce W. An access
structure is the collection W with non-empty sub-
sets of P, i.e, WE2’\{Gh. The sets in W are named
as authorized sets, and the sets not in W are named
as the unauthorized sets.

Preliminaries

1. Linear secret-sharing schemes (LSSS). LSSS is a
share-generating matrix A with rows labeled by at-
tributes. Assume S €A is an authorized set and J is
defined as I = {i| p(i) eS}. Then there exists con-
stants w; €Z, satisfying »); -7@;A; = s where J; is
valid share of secret share s. suppose A; is the i”
row of A, the equation ); -7@;A; = (1,0, ...,0) also
satisfies.

2. Algebraic signature. The algebraic signature of a file
block composed of strings s9,51,...,5, — 1 is defined as
Sig ,(So, S1,..., Sn - si .g' . The algebraic
signature has the following two properties: i) the
algebraic signature of a combination of file F, and file
Fy is defined as sig,(F, © Fy) = sig,(F1) © sigg(Fy) . li)

(2020) 9:60 Page 4 of 13

the algebraic signature of a combination of m blocks
in file F is equal to the combination of algebraic
signatures of each block named m;€G, which is
described as } 77, sig, (mj) =sig, >|; mi.

3. XOR-homomorphic function. A XOR-
homomorphic function # is a pseudo-random func-
tion that can ensure data privacy. Its properties is
as follows. For any inputs x,y, there exists h(x ®
y) = h(x) ® hi).

4. Bilinear maps. Suppose G ,,Gz2 are two
multiplicative groups with same large prime
order q, and g is a generator of G,. A bilinear map
e is a map function e:G, x G2—>G, with the
following properties: i) computability. Vu,veG,, an
efficient algorithm exists to compute e(u, v). Ii)
Binearity. Va,b EZ, Je(u", vy’) = e(u, v)™. Iii)
nondegeneracy. elg, g] # 1. Iv) security. It is hard to
compute discrete logarithm (DL) in G.

Notations
Table 1 describes the main notations in the scheme.

Scheme implementations

In this section, we present the efficient and secure
data sharing scheme for mobile devices in cloud com-
puting in detail. We divide the sharing scheme into
four phases named initial phase, data processing
phase, integrity verification phase and data sharing
phase.

Table 1 Important notations

 

 

Notation Meaning

\ Security parameter

A Attribute universe

G), G Multiplicative groups

q Prime order of group

SiIQg Algebra signature

PK, MK Public and master keys

S Attribute of DR

SK Private key of DR

F, F Plain text of file and encrypted file
T; Block tag

DP, TP Data proof and tag proof

AS Access policy

mM Data block

Uid Identity of user

Usk, Upk Private and public key of user

 
Lu et al. Journal of Cloud Computing: Advances, Systems and Applications (2020) 9:60 Page 5 of 13

Initial phase groups with prime order q, and e is a bilinear
This phase consists of three algorithms named Para- map e: G x G,—-G). Suppose A is the attribute
Setup, KeyGen,IdReg. Algorithm ParaSetup is mainly universe A whose attribute number is | A | .
responsible to generate system parameters before data KGC picks random a,/f, sj, 89, ++, S|A|EZz and
sharing. Algorithm KeyGen is mainly used to obtain the computes 6 = e(g, g)*, a= g. Then KGC defines
private key for DR to decrypt the cipher-text of shared heteromorphic function  : Gj;—>G, and algebraic
data. Algorithm IdReg is responsible for registering DR’s signature sig,(m;) = m;: g, where m€G, and g is a
identity information in a table for checking the validity generator of Gy. Next, KGC selects three secure
of DR. Figure 2 describes the data flow of the phase. hash function H; : {0,1}°>G,,H» : Gi>{0, pylon

1) ParaSetup( A, A) > (PK, MK):It is run by KGC. Hs : 40,1} > 4y KGC p ublishes p ublic
Given system security parameter 1, KGC parameters PK = (e,g,H1,H2,H3,h, sig,, 0,0, f
constructs the bilinear map group system © = ( = 8" 1<i<\a|) and keeps master key MK = (a, )
G,, G,q,e) where G,,G» are multiplicative secretly.

i

construct bilinear map group system ©
pick random @, B, 54, 52,...,S)a) © i
compute 6 = e(g,g)%,o = g®

generate public parameters PK and master key MK

requestxeyGen (S)

compute Uid = H;(S)

compute Upk = g¥'4

select t € Z,,V,V ,Vy © Gres
compute private key for DR:

K = g%0'V_,K = g'V Ky = fx Veoxes
select b € Z,, compute Ub = Uid - b

{S, Vid, Upk}

stores DR’s information

Fig. 2 Dataflow of Initial Phase

 
Lu et al. Journal of Cloud Computing: Advances, Systems and Applications (2020) 9:60 Page 6 of 13

2) KeyGen(MK, S) > (Usk): It is run by KGC. including identity Wid, attribute set S and
Before DR with attribute S share the data, he public key Upk in a table named DRTable. If
should get the private key to decrypt the identity of DR is valid, CSS transfers shared data
cipher text of shared data. DR first sends key to him. Otherwise, CSS refuses the download
generation request requestxeyGen(S) to KGC. request of DR.

After receiving the request, KGC computes

Uid = H3(S) as the DR identity and computes Data processing phase

Upk = g'"@ as DR’s public key. Next KGC The phase includes two algorithms named DataEnc,
selects teZy,V,V VxeGy xzes and computes the TagGen and InterEnc. To achieve confidentiality, algo-
private key Usk for DR as follows: K = rithm DataEnc encrypts shared data and divides the
go'V,K = g VK, = Fe Vix es. KGC randomly data into blocks. To ensure the data is intact, algorithm
selects b€Z, and computes Ub = Uid-b and TagGen generates block tag for each block. To decrease
sends {UD, g’} to CMS for later integrity DO’s computation burden, algorithm InterEnc helps
verification . Then, KGC sends {Uid, Usk} to DO computer the intermediate value for encryption.
DR and {S, Wid, Upk} to CSS. Fig. 3 describes the data flow of the phase.

3) IdReg(S, Uid) — DRTable. It is run by CSS. To
verify the validity of DR before transferring the 1) DataEnc( F) > (F ): It is run by DO. To ensure only
shared data, CSS stores DR’s information authorized DR have access to shared data, DO

define access policy AS = (M, p)

select SK,s,¥ = (S,¥2,---, Yn)?

encrypt F as F = H,(SK)@F
compute C = SK-0°,C =g°,d; =M,; ¥

compute F* = H,(F )
divide F* into N data blocks m;
compute block tags as

T, = sig,g(m,OH, (E; Il v;))

select rj € Zqietiy

compute C; = Of iy Ei = gt

 

Fig. 3 Data flow of data processing phase
Lu et al. Journal of Cloud Computing: Advances, Systems and Applications (2020) 9:60 Page 7 of 13

adefines access policy AS = (M, p), where M is a / x
n matrix and p is the function that maps each row

of the matrix to an associated attribute. That is, T,= sig, (miBH 1(£illvi)) (1)
for i © [1,J/], the value p(i) is the attribute

associated with row i. Suppose the shared data is and sends {(m, Tj) ;¢[1, nj} to CSS.

F & {0, 1}", where Jen is the max length of F and

the identity is Fid. DO selects key SKeG,, s<Z, anda 3) InterEnc( M) — (C; E;). It is run by CMS. To
random column vector Yy = (s,y5,.+., y,) € Zn. Next, decrease the computation burden of mobile devices

at DO side, CMS helps to compute the intermediate
encryption data. He selects 7; © Zz; € [1,4 and
computes C; = 0”! pli) i = g". For later integrity
verification, CMS stores the intermediate data C,, ,
E; locally.

he encrypts F as F '=H,(SK) F and computes C
= SK -65,C =¢5,A; = M; J; ; ~;-). Finally, DO
sends {F ,1,} to CMS and {C, C} sends to CSS.

2) TagGen( F ) > (T)): It is run by CMS. CMS
computes F’ = H,(F ) and divides F’ into N data
blocks named m;. Suppose f¢;, v; represent the recent
timestamp and version of each block m;. CMS
computes block tags as follows

Integrity verification phase
When DR wants to access shared data, he first sends
integrity request to CMS for verifying whether the

 

 

:
Eee,

DR CMS CSS

 

Qo
f 999
996

request -nalien Fid, Vid)

verify equation e(Upk, g”) = e(g,g)""
select c blocks and numbers R; € Z4

ch = @, Ri),ie(1,¢]

compute DP and TP:
DP = sigg(Di-1(m@h(Ri)))
TP = dizi Ti

  

   

P = (DP,TP)

compute L = )f_, sig, (h(R)) OH; (E; Il v;))
verify the equation DP = TP®L

true or false

Fig. 4 Integrity Verification Phase
Lu et al. Journal of Cloud Computing: Advances, Systems and Applications

data is intact. Then CMS generates integrity challenge
ch and sends it to CSS. After getting the challenge,
CSS computes data proof P and sends it to CMS to
verify the integrity. This phase consists of the follow-
ing three algorithms and Fig. 4 describes the data
flow of the phase.

1) ChalGen( Fid) — (ch): Before downloading shared data,
DR first sends request request najje,(Fid, Uid) to CMS for
integrity verification. After receiving the request, CMS
verifies the validity of DR’s identity with equation e(Upk,
2) =e(g,g)™. If the equation does not hold, CMS rejects
the request. Otherwise, CMS randomly selects c blocks
and corresponding random numbers R;€Z,. Then CMS
sends challenge ch = (i, Ri),; € [1,4 to CSS.

2) ProfGen( T;,F +) = (P): After receiving ch from
CMS, CSS computes data proof and tag proof

DP = sig, (S>,(m@n(R)))) (2)

1 wi
ompute W = [icy (e(C,K Je(E, Kpw))

download F, compute CK =

(2020) 9:60 Page 8 of 13

Cc
TP=S > Ti. (3)
Then he sends proof P = (DP, TP) to CMS.
3) IntegityVer( P) — (true, false).After getting the proof P ,

CMS computes L = >7j_,sig,(A(Ri)®A1 (ti ll v;)) and
verifies whether the following equation holds.

DP = TP@L (4)

If the equation holds, it indicates that the data is intact
and outputs true, Otherwise, CMS outputs false.

Data sharing phase

If the shared data is intact, DR downloads and de-
crypts F . This phase consists of the following four algo-
rithms and Fig. 5 describes the data flow of the phase.

1) InvalidyCheck( S, Uid) — (true, false). It is run by
CSS. Before downloading shared data F , DR sends

request gownload (Fid, S, Uid)

scan DRTable to verify whether DR is legitimate

es

e(C ,K) _
7

compute SK = C/CK , F = H2(SK)@F

Fig. 5 Data Flow of Sharing Phase

 
Lu et al. Journal of Cloud Computing: Advances, Systems and Applications

request requestgownload(Fid, S, Wid) to CSS. Then
CSS scans DRTable to verify whether DR is
legitimate. If DR is in DRTable, CSS transfers {C, F }
to DR. Otherwise, CSS refuses the request.

2) InterDec( C;, E;, K , Kw) — (W). If the shared
data is intact, CMS computes the intermediate
value for DR to decrease the computation
burden of DR side. Let ={i: p(i) © S}c[1,J] ,
where S is the attribute of DR. Suppose w; ©

Zpie1 is constant and satisfies the equation
Yi e @;A;= (1,0,...,0). CMS computes W = [|
(e(Ci, K )e(Ei,K yi) and sends W to DR
securely.

3) Decryption( F ) > (F): If DR is legitimate, he
downloads F and computes the follows.

iel

e(C ,K)
W

Then DR computes SK =C/CK, F=H (SK) ®F and
recovers the plaintext of shared data .

CK = = 6 (5)

4.) Revocation( Uid) — (DRTable). DR can be
revoked after leaving the organization. After
revocation of DR, DSS deletes DR’s information
from DRTable and DR cannot download the
shared file later.

Security analysis
In this section, we analyze the security of the scheme, in-
cluding correctness, unforgeability and privacy.

Theorem 1. Authorized DR can correctly verify the in-
tegrity of the data stored in CSS.

Proof. Theorem 1 can be proved by verifying the cor-
rectness of eq. (4). The proof is as follows.

TPOL
= wn T®) | sigg(h(Ri)OHi (t;||vi))
=) © _,sig,(mi®H  (t; || vi)) ®sig, (h(R;)®H 1 (t;||v:))
= S88 (mi Oh(Ri))
= sig, (S**_, (m@n(R;)) )
= DP
From the proof of eq. (4), DR can verify whether the
data is undamaged stored in CSS.

Theorem 2. Authorized DR can correctly recover the
shared data if he owns the legal attributes.

(2020) 9:60 Page 9 of 13

Proof. Theorem 2 can be proved by verifying the cor-
rectness of eq. (5). The proof is as follows.

 

e(C ,K)
[lia (e(Gi, K )e(Ei, K, »))”
e(g*, g*o'V)
e(g*, g*o'V)
[ier (c (o' fay . g'V) e(g", foi) Vpri) Oi
= e(g,g)"
— 9

 

 

Then DR computes SK = C/CK ,F = H>(SK) ® F to re-
cover the plaintext of shared data.

Theorem 3. It is computationally infeasible for CSS,
CMS and unauthorized DR to get the plaintext of health
data in the scheme.

Proof, In data processing phase, DO encrypts file F to F
with F = H2(SK) ® F, where SK is only secret to DO. There-
fore, the file is confidential to both CSS and CMS. The confi-
dentiality guarantee depends on the security of hash function
HH. As Hp is a secure one-way hash function, the data is pri-
vate to CSS and CMS. In data sharing phase, CSS sends { C,
F} to DR, where C=SK-6@° and F is the cipher text of
shared data. CMS computes the intermediate value for DR
to decrypt the shared data F only if DR’s attributes satisfy
the access structure. Therefore, any unauthorized DR cannot
get any information on the sensitive data.

Theorem 4. It is computationally impossible for CSS
to forge an integrity proof to pass the public verification,
if XOR-homomorphic function is secure.

Proof. We can prove the theorem with the following
games. In the games, we suppose the adversary is the party
who forge an integrity proof to pass the public verification.

Game 1 is the challenge game. The challenger gener-
ates public-private key pair ( PK, MK) and provides PK
to the adversary. The adversary is able to interact with
the challenger and query some data blocks. Then the

Table 2 Computation overhead of DO and DR

 

 

Entity Computation overhead
Do (1 + )Mul + 2Exp + Hash + Xor
DR Pair + Xor + 2Div

 
Lu et al. Journal of Cloud Computing: Advances, Systems and Applications

(2020) 9:60 Page 10 of 13

 

GE Our Scheme

(EE Zhang's Scheme

a
=
@
Oo
O
®
-
_

20 40

60

Size of Attribute Universe

Fig. 6 Computation Time of DO with Different Size of Attribute Universe

challenger computes corresponding block tags and
returns the tags to the adversary. When challenger
launches challenge to the adversary, he can respond to
the challenger with data proof and tag proof.

Game 2 is another challenge game in which the challen-
ger keeps all the tags ever issued as part of the queries. If
the challenger detects the aggregated block tags TP is not

GS Our Scheme

GM Zhang's Scheme

Time Cost (ms)

 

equal to TP = )~._,Tj, he declares the game fails.

Game 3 is the same as game 2 with one difference that
the challenger keeps all response sequences to the adver-
sarys queries. Suppose the challenger sends ch = (i, R;) to
the adversary, the adversary’s reply to the query is P=
(DP, TP) where T = )~;_,T;. In the scheme, P is the cor-
rect proof and equation DP = TP @L holds. Suppose the

Data Size (M)

Fig. 7 Computation Time of DO with Different Size of Shared Data

 
Lu et al. Journal of Cloud Computing: Advances, Systems and Applications

(2020) 9:60 Page 11 of 13

 

GE Our Scheme

GH Zhang's Scheme

QO
&
@
Oo
O
©
£
~_

20 40

60

Size of attribute universe

Fig. 8 Decryption Time of DU with Different Size of Attribute Universe

adversary’s proof is P = (DP, TP), where TP = S~<_,T;,
then the equation DP = TP @L also holds. We define
ADP =DP ®DP, 4TP=TP ® TP.We make the XOR op-
eration on the above two verification equations and get
ADP = 4 DP. The above equation holds with the probabil-
ity is . The probability can be negligible.

Performance evaluation
In this section, we evaluate the computation costs of DO
and DR in the scheme and compare it with scheme [22].

GE Our Scheme
GE Zhang's Scheme

Time Cost (ms)

 

Performance analysis of mobile terminals

To analyze computation overhead of the scheme, we
define the following notations to denote the corre-
sponding operations: Let Pair denote a paring oper-
ation, Hash denote a hash operation and Exp denote
an exponentiation operation. Similarly, Mul represents
a multiplication operation. Xor and Sig respectively
denote XOR and algebraic signature operation of the
scheme.

1) Computation overhead of DO side

Data Size (M)

Fig. 9 Decryption Time of DR with Different Size of Shared Data

 
Lu et al. Journal of Cloud Computing: Advances, Systems and Applications

The computation overhead of DO is mainly in encryp-
tion phase. DO first computes F =H (K)®F,C=K - 6°,
C =g* A;=M; Y isis ; Lherefore, the computation over-
head of DO side is (1 + )Mul + 2Exp + Hash + Xor.

2) Computation overhead of DR side

The computation overhead of DR is mainly in data
sharing phase. DR downloads F and computes CK =

(CK) 9s . Then DR gets K=C/CK and recovers the
plaintext F=H.(K)®F. Therefore, the computation
overhead of DR side is Pair + Xor + 2Div.

Table. 2 illustrates the computation overhead of mo-
bile terminals on both sides.

Experimental results

We simulate our scheme with the Pairing Based Cryptog-
raphy (PBC) library of version 0.5.14. We compare the
computation time of DO and DU with scheme [22] by util-
izing an MNT d159 curve with 160-bit group order. All the
experiment results represent the average of 20 trials.

1) Computation time of DO in processing phase

The computation time of DO mainly generates in
algorithm DataEnc of data processing phase. We
first test the relation between DO’s computation
time and the size of attribute universe A as de-
scribed in Fig. 6. We can see that when size of attri-
bute universe A _ varies from 1 to 100, the
computation time of DO increases slowly and costs
less time than Zhang’s. Then we test the relation be-
tween DO’s computation time and the size of shared
data as described in Fig. 7. From Fig. 7, we can con-
clude that DO’s computation time in our scheme is
lower than that of Zhang’s scheme when shared data
varies from 1M to 10M.

2) Computation time of DR in data sharing phase

In data sharing phase, we first test the relationship be-
tween DR’s computation time and the size of attribute
universe A as described in Fig. 8. Because CMS help DR
to computes the intermediate data of decryption, Dk’s
computation time is constant when the size of attribute
universe A increases. We also test the relationship be-
tween DR’s computation time and the size of shared data
as described in Fig. 9. We can see that with the size of
shared data growing, the computation time of DR in-
creases slowly. From Figs. 8 and 9, we can conclude that
DR’s computation time in our scheme is less than that
in Zhang’s scheme.

(2020) 9:60 Page 12 of 13

Conclusion

In this paper, we propose an efficient and secure data
sharing scheme for mobile devices. The scheme guaran-
tees security and authorized access of shared sensitive
data. Furtherly, the scheme realizes efficient integrity
verification before DR shares the data to avoid incorrect
computation. Finally, the scheme achieves lightweight
operations of mobile terminals on both DO and DR
sides.

Abbreviations

KGC: Key Generator Center; DO: Data Owner; CS: Cloud Servers; DR: Data
Requester; CSP: Cloud Storage Servers; CMS: Cloud Manage Servers; KP-
ABE: Key Policy Attribute Based Encryption; CP-ABE: Cipher Text Policy
Attribute Based Encryption

Acknowledgments
We sincerely thank the Reviewers and the Editor for their valuable
suggestions.

Authors’ contributions

Xiuging Lu, ZAenkuan Pan, Hequn Xian designed the study and write the
paper. Hequn Xian performed the simulations. Xiuging Lu, ZAenkuan Pan
wrote the paper. All authors reviewed and edited the manuscript. All authors
read and approved the final manuscript.

Funding

This work is supported in part by Natural Science Foundation of China under
Grant No. 61772294 and Grant No. 61602214, in part by Natural Science
Foundation of Shandong Province under Grant No. ZR2019LZHO02.

Availability of data and materials
The data used to support the findings of this study is available from the
corresponding author upon request.

Competing interests
The authors declare that they have no competing interests.

Author details

‘College of Computer Science and Technology, Qingdao University, Qingdao
266071, China. *Department of management science and Engineering,
College of Business, Qingdao University, Qingdao 266071, China.

Received: 16 June 2020 Accepted: 6 October 2020
Published online: 23 October 2020

References

1. Farahat IS, Tolba AS (2018) A secure real-time internet of medical smart

things (IOMST). Comput Electrical Eng 72:455-467

2. Rahmani AM, Gia TN, Negash KB (2018) Exploiting smart e-Health gateways

at the edge of healthcare Internet-of-Things: A fog computing approach.

Futur Gener Comput Syst 78:641-658

3. Zhang Y, Qiu M, Tsai C, Hassan M, Alamri A (2017) Health-CPS: healthcare
cyber-physical system assisted by cloud and big data. IEEE Syst J 11:88-95

4. Ghazvini A, Shukur Z (2013) Security challenges and success factors of
electronic healthcare system. Proc Technol 11:212-219

5. Guan Z, Lv Z, Du X et al (2019) Achieving data utility-privacy tradeoff in
internet of medical things: a machine learning approach. Futur Gener
Comput Syst 98:60-68

6.  Elhoseny M, Abdelaziz A (2018) A hybrid model of internet of things and
cloud computing to manage big data in health services applications. Futur
Gener Comput Syst 86:1383-1394

7. Han K, Li Q, Deng Z (2016) Security and efficiency data sharing scheme for
cloud storage. Chaos Solitons Fractals 86:107-116

8. Zhang L, Zhang H, Jia Y (2020) Blockchain-based two-party fair contract
signing scheme. Inf Sci 535:142-155

9. Lu X, Cheng X (2020) A secure and lightweight data sharing scheme for
internet of medical things. IEEE Access 8:5022-5030. https://doi.org/10.1109/
ACCESS.2019.2962729

 

 
Lu et al. Journal of Cloud Computing: Advances, Systems and Applications

20.

22.

23.

24.

25.

26.

2/7.
28.
29.

30.

32.
33.
34,
35,
36.

37.

38.

Bahga A, Madisetti VK (2013) A cloud-based approach for interoperable
electronic health records (EHRs). IEEE J Biomed Health Inf 17(5):894-906
Tawalbeh LA, Mehmood R, Benkhlifa E, Song H (2016) Mobile cloud
computing model and big data analysis for healthcare applications. IEEE
Access 4:6171-6180

Nguyen DC, Pathirana PN, Ding M, Seneviratne A (2019) Blockchain for
Secure EHRs Sharing of Mobile Cloud Based E-Health Systems. IEEE Access
7:66792-66806. https://doi.org/10.1109/ACCESS.2019.2917555

Chang V (2017) Towards data analysis for weather cloud computing. Knowl
Based Syst 127:29-45

Gao F, Sunyaev A et al (2019) Context matters: a review of the determinant
factors in the decision to adopt cloud computing in healthcare. Int J Inf
Manag 48:120-138

Akl SG, Taylor PD (1983) Cryptographic solution to a problem of access
control in a hierarchy. ACM Trans Comput Syst 1:239-248

Goyal V, Pandy O, Sahai A, Waters B (2006) Attribute-based encryption for
fine-grained access control of encrypted data. In: Proceedings of the 13th
ACM conference on Computer and communications security, p 89

Hur J, Noh CD (2011) Attribute-based access control with efficient
revocation in data outsourcing systems. IEEE Trans Parallel Distributed Syst
22:1214-1221

Bethencourt J, Sahai A, Waters B (2007) Ciphertext-policy attribute based
encryption. In: Proceedings of the IEEE symposium on security privacy, p 321
Lewko A, Waters B (2011) Decentralizing attribute-based encryption. In:
Proceedings of the 30th Annual international conference on Theory and
applications of cryptographic techniques: advances in cryptolog, p 568
Waters B (2011) Ciphertext-policy attribute-based encryption: an expressive,
efficient, and provably secure realization. In: Proceedings of the
International Workshop on Public Key Cryptography, pp 53-70

Cheung L, Newport C (2007) Provably secure ciphertext policy ABE. In: Proc.

ACM Conf. Comput. Commun. Security (CCS), pp 456-465

Zhang Y, Zhen D, Deng R (2018) Security and privacy in smart health:
efficient policy-hiding attripute-based access control. IEEE Internet Things J
5:2130-2145

Yang M, Zhang T (2018) Efficient Privacy-Preserving Access Control Scheme
in Electronic Health Records System. Sensors 18:3520-3545.

Phuong T, Yang G, Susilo W (2016) Hidden ciphertext policy attribute-based
encryption under standard assumptions. IEEE Trans Inf Forensic Secur 11:
35-45

Zhang Y, Chen F, Li J (2017) Ensuring attribute privacy protection and fast
decryption for outsourced data security in mobile cloud computing. Inf Sci
379:42-61

Ateniese G, PietroR D, Mancini LV, Tsudik G (2008) Scalable and efficient
provable data possession. In: Proceedings of the 4th international
conference on Security and privacy in communication networks, pp 1-10
Yang K (2017) An efficient and fine-grained big data access control scheme
with privacy-preserving policy. IEEE Internet Things Journal 4:563-571
Wang G, Liu Q, Wu J Hierarchical attribute-based encryption and scalable
user revocation for sharing data in cloud servers. Comput Secur 30:320-331
Guo Z, Li M, Fan X (2013) Attribute-based ring signcryption scheme. Secur
Commun Netw 6:790-796

Wei J, Hu X, Liu W (2014) Traceable attribute-based signcryption. Secur
Commun Netw 7:2302-2317

Liu J, Huang X, Liu JK (2015) Secure sharing of personal health records in
cloud computing: Ciphertext-policy attribute-based signcryption. Futur
Gener Comput Syst 52:67-76

Hu C, Li W (2017) A secure and verifiable access control scheme for big
data storage in clouds. IEEE Trans Big Data 4:341-355

Cai H, Xu B, Jiang L (2017) loT-based big data storage systems in cloud
computing: perspectives and challenges. IEEE Internet Things 4:75-87
Ateniese G, Burns R, Curtmola R (2007) Provable data possession at
untrusted stores. ACM Conf Comput Commun Secur 14:598-609

Erway C, Papamanthou C, Tamassia R (2009) Dynamic provable data
possession. ACM Conf Comput Commun Secur 17:213-222

Zhu Y, Ahn GJ, Hu H, Yau SS (2013) Dynamic audit services for outsourced
storages in clouds. IEEE Trans Serv Comput 6:227-238

Yang K, Jia X (2013) An efficient and secure dynamic auditing protocol for
data storage in cloud computing. IEEE Trans Parallel Distributed Syst 24:
1717-1726

Tian H, Chen Y, Chang CC (2017) Dynamic-hash-table based public auditing
for secure cloud storage. IEEE Trans Serv Comput 10:701-714

 

(2020) 9:60 Page 13 of 13

39. Wang Q, Wang C, Ren K, Lou W (2011) Enabling public auditability and data
dynamics for storage security in cloud computing. IEEE Trans Parallel

Distributed Syst 22:847-859

40. Liu C, Chen J, Yang LT, Zhang X (2014) Authorized public auditing of

dynamic big data storage on cloud with efficient verifiable fine-grained

updates. IEEE Trans Parallel Distributed Syst 25:2234-2244

41. Gan Q, Wang X, Fang X (2018) Efficient and secure auditing scheme for

outsourced big data with dynamicity in cloud. Inf Sci 61:93-107

42. Luo Y, Fu S, Xu M (2014) Enable data dynamics for algebraic signatures
based remote data possession checking in the cloud storage. China
Commun 11:114-124

43. Bhaskaran K, IIfrich P, Liffrnan D (2018) Double-blind consent-driven data
sharing on blockchain. In: Cloud Engineering (IC2E), IEEE International
Conference on IEEE, pp 385-439

44, Liu CW, Hsien WF, Yang CC (2016) A survey of public auditing for shared
data storage with DU revocation in cloud computing. Int J Netw Secur 18:
650-666

45. Shamir A (1985) Identity-Based Cryptosystems and Signature Schemes. In:
Blakley GR, Chaum D (eds) Advances in Cryptology. CRYPTO 1984. Lecture
Notes in Computer Science, vol 196. Springer, Berlin, Heidelberg. https://doi.
org/10.1007/3-540-39568-7_5

46. Yoon E-J, Choi Y, Kim C (2013) New |D-based proxy signature scheme with
message recovery. In: Grid and Pervasive Computing (Lecture Notes in
Computer Science), vol 7861. Springer-Verlag, Berlin, pp 945-951

47. Yu J, Hao R (2019) Comments on SEPDP: secure and efficient privacy
preserving provable data possession in cloud storage. IEEE Trans Serv
Comput. https://doi.org/10.1109/TSC.2019.291 2379

48. Lu XQ, Pan ZK, Xian HQ (2020) An integrity verification scheme of cloud
storage for internet-of-things mobile terminal devices. Comput Secur 92.
https://doi.org/10.1016/j.cose.2019.101686

49. Y. Zhang, J. Yu, R. Hao, C, Wang, K. Ren, “Enabling Efficient User Revocation

in Identity-based Cloud Storage Auditing for Shared Big Data,” IEEE Trans

Dependable Secure Comput, vol. 17, pp. 608-619, 2020

50. Shen W, Su Y, Hao R (2020) Lightweight cloud storage auditing with

Deduplication supporting strong privacy protection. IEEE Access 8:44359-
44372

51. Zhao P, Yu J, Zhang H (2020) How to securely outsource finding the min-
cut of undirected edge-weighted graphs. IEEE Trans Inf Forensic Secur 15:
315-328

52. Zhang H, Jia Y, Cheng L (2020) Practical and secure outsourcing algorithms
for solving quadratic congruences in internet of things. IEEE Internet Things
J 7:2968-2981

 

 

 

 

 

Publisher’s Note
Springer Nature remains neutral with regard to jurisdictional claims in
published maps and institutional affiliations.

 

Submit your manuscript to a SpringerOpen®
journal and benefit from:

> Convenient online submission

> Rigorous peer review

> Open access: articles freely available online
> High visibility within the field

> Retaining the copyright to your article

 

Submit your next manuscript at > springeropen.com

 

 

 
